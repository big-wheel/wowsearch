// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parseElementTree should doc.html 1`] = `
DocumentNode {
  "children": Array [
    TextNode {
      "domNode": <p>
        <b>
          关于我
        </b>
        ：
        <br />
        儿葱，25岁，工作 3 年半，在百度工作 3 年，现在美团任职，对于 Node.js Web React 方向比较熟悉。Github: imcuttle   邮箱: 
        <a
          href="mailto:imcuttle@163.com"
        >
          imcuttle@163.com
        </a>
      </p>,
      "type": "text",
      "value": "关于我：儿葱，25岁，工作 3 年半，在百度工作 3 年，现在美团任职，对于 Node.js Web React 方向比较熟悉。Github: imcuttle   邮箱: imcuttle@163.com",
    },
    TextNode {
      "domNode": <p>
        下面进入正题，我将从一个实际的问题场景出发，层层讲诉 React 中 Mobx 和 Redux 的原理和对比。
      </p>,
      "type": "text",
      "value": "下面进入正题，我将从一个实际的问题场景出发，层层讲诉 React 中 Mobx 和 Redux 的原理和对比。",
    },
    TextNode {
      "domNode": <p>
        在业务开发中，我们经常会需要开发一些复杂组件，其中不仅包括交互的复杂，也包括涉及到的数据结构复杂，如书写一个无限层级的树组件，其中的复杂度包括但不限于：
      </p>,
      "type": "text",
      "value": "在业务开发中，我们经常会需要开发一些复杂组件，其中不仅包括交互的复杂，也包括涉及到的数据结构复杂，如书写一个无限层级的树组件，其中的复杂度包括但不限于：",
    },
    TextNode {
      "domNode": <ul>
        <li>
          数据嵌套递归逻辑
        </li>
        <li>
          各个节点更新渲染的逻辑处理
        </li>
        <li>
          节点渲染性能的考量
        </li>
      </ul>,
      "type": "text",
      "value": "数据嵌套递归逻辑各个节点更新渲染的逻辑处理节点渲染性能的考量",
    },
    TextNode {
      "domNode": <p>
        以一个我碰到的实际业务场景为例：需要开发一个将 markdown文本渲染成 html 元素的组件。
      </p>,
      "type": "text",
      "value": "以一个我碰到的实际业务场景为例：需要开发一个将 markdown文本渲染成 html 元素的组件。",
    },
    LvlNode {
      "anchor": null,
      "children": Array [
        TextNode {
          "domNode": <p>
            大部分比较快速的实现方式比较简单，将 markdown 转换成 html 文本，然后使用 dangerouslySetInnerHTML 渲染 html 文本。
          </p>,
          "type": "text",
          "value": "大部分比较快速的实现方式比较简单，将 markdown 转换成 html 文本，然后使用 dangerouslySetInnerHTML 渲染 html 文本。",
        },
        TextNode {
          "domNode": <p>
            这种方式比较快捷，但是
            <b>
              没有模块化、不方便注入交互逻辑
            </b>
            。如需支持允许外部控制渲染各个 markdown 语法类型的结构体，这种方式不能够满足。
          </p>,
          "type": "text",
          "value": "这种方式比较快捷，但是没有模块化、不方便注入交互逻辑。如需支持允许外部控制渲染各个 markdown 语法类型的结构体，这种方式不能够满足。",
        },
        TextNode {
          "domNode": <pre>
            <code
              class="language-js"
            >
              <span
                class="kr"
              >
                const
              </span>
               
              <span
                class="nx"
              >
                MarkdownView
              </span>
               
              <span
                class="o"
              >
                =
              </span>
               
              <span
                class="p"
              >
                ({
              </span>
              <span
                class="nx"
              >
                markdown
              </span>
              <span
                class="p"
              >
                })
              </span>
               
              <span
                class="p"
              >
                =&gt;
              </span>
               
              <span
                class="o"
              >
                &lt;
              </span>
              <span
                class="nx"
              >
                div
              </span>
               
              <span
                class="nx"
              >
                className
              </span>
              <span
                class="o"
              >
                =
              </span>
              <span
                class="s2"
              >
                "markdown-body"
              </span>
               
              <span
                class="nx"
              >
                dangerouslySetInnerHTML
              </span>
              <span
                class="o"
              >
                =
              </span>
              <span
                class="p"
              >
                {{
              </span>
              <span
                class="nx"
              >
                __html
              </span>
              <span
                class="o"
              >
                :
              </span>
               
              <span
                class="nx"
              >
                marked
              </span>
              <span
                class="p"
              >
                (
              </span>
              <span
                class="nx"
              >
                markdown
              </span>
              <span
                class="p"
              >
                )}}
              </span>
               
              <span
                class="o"
              >
                /&gt;
              </span>
              

            </code>
          </pre>,
          "type": "code",
          "value": "const MarkdownView = ({markdown}) => <div className=\\"markdown-body\\" dangerouslySetInnerHTML={{__html: marked(markdown)}} />
",
        },
        TextNode {
          "domNode": <p>
            所以这时候就应该设计成
            <b>
              结构化渲染 
            </b>
            markdown，如使用 
            <a
              class=" wrap external"
              data-za-detail-view-id="1043"
              href="https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/remark"
              rel="nofollow noreferrer"
              target="_blank"
            >
              remark
            </a>
             将 markdown 解析成为 
            <a
              class=" wrap external"
              data-za-detail-view-id="1043"
              href="https://link.zhihu.com/?target=https%3A//github.com/syntax-tree/mdast"
              rel="nofollow noreferrer"
              target="_blank"
            >
              Markdown AST
            </a>
             (Abstract Syntax Tree 抽象语法树)
          </p>,
          "type": "text",
          "value": "所以这时候就应该设计成结构化渲染 markdown，如使用 remark 将 markdown 解析成为 Markdown AST (Abstract Syntax Tree 抽象语法树)",
        },
        TextNode {
          "domNode": <p>
            如以下 markdown 文本：
          </p>,
          "type": "text",
          "value": "如以下 markdown 文本：",
        },
        TextNode {
          "domNode": <pre>
            <code
              class="language-abap"
            >
              <span
                class="err"
              >
                ##
              </span>
               
              <span
                class="nv"
              >
                Header
              </span>
              

              <span
                class="o"
              >
                &gt;
              </span>
               
              <span
                class="k"
              >
                Alpha
              </span>
               
              <span
                class="nv"
              >
                bravo
              </span>
               
              <span
                class="nv"
              >
                charlie
              </span>
              <span
                class="p"
              >
                .
              </span>
            </code>
          </pre>,
          "type": "code",
          "value": "## Header
> Alpha bravo charlie.",
        },
        TextNode {
          "domNode": <p>
            将会解析成如下 MD AST
          </p>,
          "type": "text",
          "value": "将会解析成如下 MD AST",
        },
        TextNode {
          "domNode": <pre>
            <code
              class="language-text"
            >
              [
  {
    type: 'heading',
    depth: 1,
    children: [{type: 'text', value: 'Header'}]
  },
  {
    type: 'blockquote',
    children: [{
      type: 'paragraph',
      children: [{type: 'text', value: 'Alpha bravo charlie.'}]
    }]
  }
]
            </code>
          </pre>,
          "type": "code",
          "value": "[
  {
    type: 'heading',
    depth: 1,
    children: [{type: 'text', value: 'Header'}]
  },
  {
    type: 'blockquote',
    children: [{
      type: 'paragraph',
      children: [{type: 'text', value: 'Alpha bravo charlie.'}]
    }]
  }
",
        },
        TextNode {
          "domNode": <p>
            然后，我们只需要通过渲染 MD AST 即可
          </p>,
          "type": "text",
          "value": "然后，我们只需要通过渲染 MD AST 即可",
        },
        TextNode {
          "domNode": <pre>
            <code
              class="language-js"
            >
              <span
                class="kr"
              >
                import
              </span>
               
              <span
                class="nx"
              >
                React
              </span>
               
              <span
                class="nx"
              >
                from
              </span>
               
              <span
                class="s2"
              >
                "react"
              </span>
              <span
                class="p"
              >
                ;
              </span>
              


              <span
                class="kr"
              >
                const
              </span>
               
              <span
                class="nx"
              >
                renderers
              </span>
               
              <span
                class="o"
              >
                =
              </span>
               
              <span
                class="p"
              >
                {
              </span>
              
  
              <span
                class="nx"
              >
                heading
              </span>
              <span
                class="o"
              >
                :
              </span>
               
              <span
                class="p"
              >
                (
              </span>
              <span
                class="nx"
              >
                props
              </span>
              <span
                class="p"
              >
                )
              </span>
               
              <span
                class="p"
              >
                =&gt;
              </span>
               
              <span
                class="p"
              >
                {
              </span>
              
    
              <span
                class="kr"
              >
                const
              </span>
               
              <span
                class="p"
              >
                {
              </span>
               
              <span
                class="nx"
              >
                depth
              </span>
               
              <span
                class="p"
              >
                }
              </span>
               
              <span
                class="o"
              >
                =
              </span>
               
              <span
                class="nx"
              >
                props
              </span>
              <span
                class="p"
              >
                .
              </span>
              <span
                class="nx"
              >
                node
              </span>
              <span
                class="p"
              >
                ;
              </span>
              
    
              <span
                class="kr"
              >
                const
              </span>
               
              <span
                class="nx"
              >
                tagName
              </span>
               
              <span
                class="o"
              >
                =
              </span>
               
              <span
                class="sb"
              >
                \`h
              </span>
              <span
                class="si"
              >
                \${
              </span>
              <span
                class="nx"
              >
                depth
              </span>
              <span
                class="si"
              >
                }
              </span>
              <span
                class="sb"
              >
                \`
              </span>
              <span
                class="p"
              >
                ;
              </span>
              
    
              <span
                class="k"
              >
                return
              </span>
               
              <span
                class="nx"
              >
                React
              </span>
              <span
                class="p"
              >
                .
              </span>
              <span
                class="nx"
              >
                createElement
              </span>
              <span
                class="p"
              >
                (
              </span>
              <span
                class="nx"
              >
                tagName
              </span>
              <span
                class="p"
              >
                ,
              </span>
               
              <span
                class="p"
              >
                {},
              </span>
               
              <span
                class="nx"
              >
                props
              </span>
              <span
                class="p"
              >
                .
              </span>
              <span
                class="nx"
              >
                children
              </span>
              <span
                class="p"
              >
                );
              </span>
              
  
              <span
                class="p"
              >
                },
              </span>
              
  
              <span
                class="nx"
              >
                paragraph
              </span>
              <span
                class="o"
              >
                :
              </span>
               
              <span
                class="p"
              >
                (
              </span>
              <span
                class="nx"
              >
                props
              </span>
              <span
                class="p"
              >
                )
              </span>
               
              <span
                class="p"
              >
                =&gt;
              </span>
               
              <span
                class="o"
              >
                &lt;
              </span>
              <span
                class="nx"
              >
                p
              </span>
              <span
                class="o"
              >
                &gt;
              </span>
              <span
                class="p"
              >
                {
              </span>
              <span
                class="nx"
              >
                props
              </span>
              <span
                class="p"
              >
                .
              </span>
              <span
                class="nx"
              >
                children
              </span>
              <span
                class="p"
              >
                }
              </span>
              <span
                class="o"
              >
                &lt;
              </span>
              <span
                class="err"
              >
                /p&gt;,
              </span>
              
  
              <span
                class="nx"
              >
                blockquote
              </span>
              <span
                class="o"
              >
                :
              </span>
               
              <span
                class="p"
              >
                (
              </span>
              <span
                class="nx"
              >
                props
              </span>
              <span
                class="p"
              >
                )
              </span>
               
              <span
                class="p"
              >
                =&gt;
              </span>
               
              <span
                class="o"
              >
                &lt;
              </span>
              <span
                class="nx"
              >
                blockquote
              </span>
              <span
                class="o"
              >
                &gt;
              </span>
              <span
                class="p"
              >
                {
              </span>
              <span
                class="nx"
              >
                props
              </span>
              <span
                class="p"
              >
                .
              </span>
              <span
                class="nx"
              >
                children
              </span>
              <span
                class="p"
              >
                }
              </span>
              <span
                class="o"
              >
                &lt;
              </span>
              <span
                class="err"
              >
                /blockquote&gt;,
              </span>
              
  
              <span
                class="nx"
              >
                text
              </span>
              <span
                class="o"
              >
                :
              </span>
               
              <span
                class="p"
              >
                (
              </span>
              <span
                class="nx"
              >
                props
              </span>
              <span
                class="p"
              >
                )
              </span>
               
              <span
                class="p"
              >
                =&gt;
              </span>
               
              <span
                class="o"
              >
                &lt;
              </span>
              <span
                class="nx"
              >
                span
              </span>
              <span
                class="o"
              >
                &gt;
              </span>
              <span
                class="p"
              >
                {
              </span>
              <span
                class="nx"
              >
                props
              </span>
              <span
                class="p"
              >
                .
              </span>
              <span
                class="nx"
              >
                node
              </span>
              <span
                class="p"
              >
                .
              </span>
              <span
                class="nx"
              >
                value
              </span>
              <span
                class="p"
              >
                }
              </span>
              <span
                class="o"
              >
                &lt;
              </span>
              <span
                class="err"
              >
                /span&gt;
              </span>
              

              <span
                class="p"
              >
                };
              </span>
              


              <span
                class="kr"
              >
                const
              </span>
               
              <span
                class="nx"
              >
                renderNode
              </span>
               
              <span
                class="o"
              >
                =
              </span>
               
              <span
                class="p"
              >
                (
              </span>
              <span
                class="nx"
              >
                node
              </span>
              <span
                class="p"
              >
                ,
              </span>
               
              <span
                class="nx"
              >
                props
              </span>
              <span
                class="p"
              >
                )
              </span>
               
              <span
                class="p"
              >
                =&gt;
              </span>
               
              <span
                class="p"
              >
                {
              </span>
              
  
              <span
                class="kr"
              >
                const
              </span>
               
              <span
                class="nx"
              >
                Comp
              </span>
               
              <span
                class="o"
              >
                =
              </span>
               
              <span
                class="nx"
              >
                renderers
              </span>
              <span
                class="p"
              >
                [
              </span>
              <span
                class="nx"
              >
                node
              </span>
              <span
                class="p"
              >
                .
              </span>
              <span
                class="nx"
              >
                type
              </span>
              <span
                class="p"
              >
                ];
              </span>
              
  
              <span
                class="k"
              >
                return
              </span>
               
              <span
                class="p"
              >
                (
              </span>
              
    
              <span
                class="o"
              >
                &lt;
              </span>
              <span
                class="nx"
              >
                Comp
              </span>
               
              <span
                class="p"
              >
                {...
              </span>
              <span
                class="nx"
              >
                props
              </span>
              <span
                class="p"
              >
                }
              </span>
               
              <span
                class="nx"
              >
                node
              </span>
              <span
                class="o"
              >
                =
              </span>
              <span
                class="p"
              >
                {
              </span>
              <span
                class="nx"
              >
                node
              </span>
              <span
                class="p"
              >
                }
              </span>
              <span
                class="o"
              >
                &gt;
              </span>
              
      
              <span
                class="p"
              >
                {(
              </span>
              <span
                class="nx"
              >
                node
              </span>
              <span
                class="p"
              >
                .
              </span>
              <span
                class="nx"
              >
                children
              </span>
               
              <span
                class="o"
              >
                ||
              </span>
               
              <span
                class="p"
              >
                []).
              </span>
              <span
                class="nx"
              >
                map
              </span>
              <span
                class="p"
              >
                ((
              </span>
              <span
                class="nx"
              >
                childNode
              </span>
              <span
                class="p"
              >
                ,
              </span>
               
              <span
                class="nx"
              >
                index
              </span>
              <span
                class="p"
              >
                )
              </span>
               
              <span
                class="p"
              >
                =&gt;
              </span>
              
        
              <span
                class="nx"
              >
                renderNode
              </span>
              <span
                class="p"
              >
                (
              </span>
              <span
                class="nx"
              >
                childNode
              </span>
              <span
                class="p"
              >
                ,
              </span>
               
              <span
                class="p"
              >
                {
              </span>
               
              <span
                class="nx"
              >
                parent
              </span>
              <span
                class="o"
              >
                :
              </span>
               
              <span
                class="nx"
              >
                node
              </span>
              <span
                class="p"
              >
                ,
              </span>
               
              <span
                class="nx"
              >
                key
              </span>
              <span
                class="o"
              >
                :
              </span>
               
              <span
                class="nx"
              >
                index
              </span>
               
              <span
                class="p"
              >
                })
              </span>
              
      
              <span
                class="p"
              >
                )}
              </span>
              
    
              <span
                class="o"
              >
                &lt;
              </span>
              <span
                class="err"
              >
                /Comp&gt;
              </span>
              
  
              <span
                class="p"
              >
                );
              </span>
              

              <span
                class="p"
              >
                };
              </span>
              


              <span
                class="kr"
              >
                const
              </span>
               
              <span
                class="nx"
              >
                MarkdownView
              </span>
               
              <span
                class="o"
              >
                =
              </span>
               
              <span
                class="p"
              >
                ({
              </span>
               
              <span
                class="nx"
              >
                mdast
              </span>
               
              <span
                class="p"
              >
                })
              </span>
               
              <span
                class="p"
              >
                =&gt;
              </span>
               
              <span
                class="p"
              >
                {
              </span>
              
  
              <span
                class="k"
              >
                return
              </span>
               
              <span
                class="p"
              >
                (
              </span>
              
    
              <span
                class="o"
              >
                &lt;
              </span>
              <span
                class="nx"
              >
                div
              </span>
               
              <span
                class="nx"
              >
                className
              </span>
              <span
                class="o"
              >
                =
              </span>
              <span
                class="s2"
              >
                "markdown-body"
              </span>
              <span
                class="o"
              >
                &gt;
              </span>
              
      
              <span
                class="p"
              >
                {
              </span>
              <span
                class="o"
              >
                !!
              </span>
              <span
                class="nx"
              >
                mdast
              </span>
               
              <span
                class="o"
              >
                &&
              </span>
               
              <span
                class="nx"
              >
                mdast
              </span>
              <span
                class="p"
              >
                .
              </span>
              <span
                class="nx"
              >
                map
              </span>
              <span
                class="p"
              >
                ((
              </span>
              <span
                class="nx"
              >
                node
              </span>
              <span
                class="p"
              >
                ,
              </span>
               
              <span
                class="nx"
              >
                i
              </span>
              <span
                class="p"
              >
                )
              </span>
               
              <span
                class="p"
              >
                =&gt;
              </span>
               
              <span
                class="nx"
              >
                renderNode
              </span>
              <span
                class="p"
              >
                (
              </span>
              <span
                class="nx"
              >
                node
              </span>
              <span
                class="p"
              >
                ,
              </span>
               
              <span
                class="p"
              >
                {
              </span>
               
              <span
                class="nx"
              >
                key
              </span>
              <span
                class="o"
              >
                :
              </span>
               
              <span
                class="nx"
              >
                i
              </span>
               
              <span
                class="p"
              >
                }))}
              </span>
              
    
              <span
                class="o"
              >
                &lt;
              </span>
              <span
                class="err"
              >
                /div&gt;
              </span>
              
  
              <span
                class="p"
              >
                );
              </span>
              

              <span
                class="p"
              >
                };
              </span>
              


              <span
                class="kr"
              >
                export
              </span>
               
              <span
                class="k"
              >
                default
              </span>
               
              <span
                class="nx"
              >
                MarkdownView
              </span>
              <span
                class="p"
              >
                ;
              </span>
              

            </code>
          </pre>,
          "type": "code",
          "value": "import React from \\"react\\";

const renderers = {
  heading: (props) => {
    const { depth } = props.node;
    const tagName = \`h\${depth}\`;
    return React.createElement(tagName, {}, props.children);
  },
  paragraph: (props) => <p>{props.children}</p>,
  blockquote: (props) => <blockquote>{props.children}</blockquote>,
  text: (props) => <span>{props.node.value}</span>
};

const renderNode = (node, props) => {
  const Comp = renderers[node.type];
  return (
    <Comp {...props} node={node}>
      {(node.children || []).map((childNode, index) =>
        renderNode(childNode, { parent: node, key: index })
      )}
    </Comp>
  );
};

const MarkdownView = ({ mdast }) => {
  return (
    <div className=\\"markdown-body\\">
      {!!mdast && mdast.map((node, i) => renderNode(node, { key: i }))}
    </div>
  );
};

export default MarkdownView;
",
        },
        TextNode {
          "domNode": <p>
            以上一段剪短的代码就是简单的实现，但是这段代码只是功能正确，在遇到大体量的 MDAST，同时涉及到 MDAST 更新渲染的时候，该 MarkdownView 性能较低。
          </p>,
          "type": "text",
          "value": "以上一段剪短的代码就是简单的实现，但是这段代码只是功能正确，在遇到大体量的 MDAST，同时涉及到 MDAST 更新渲染的时候，该 MarkdownView 性能较低。",
        },
        TextNode {
          "domNode": <p>
            优化组件的更新渲染性能，我们从以下 2 个点展开：
          </p>,
          "type": "text",
          "value": "优化组件的更新渲染性能，我们从以下 2 个点展开：",
        },
        TextNode {
          "domNode": <ol>
            <li>
              理清 React 的单向数据流和组件更新模式
            </li>
            <li>
              优化更新性能
            </li>
            <ol>
              <li>
                immutable 操作
              </li>
              <li>
                细化更新颗粒度
              </li>
              <li>
                善于用 shouldComponentUpdate
              </li>
              <li>
                mobx?
                <br />
                mutable 操作
              </li>
            </ol>
          </ol>,
          "type": "text",
          "value": "理清 React 的单向数据流和组件更新模式优化更新性能immutable 操作细化更新颗粒度善于用 shouldComponentUpdatemobx?mutable 操作",
        },
        LvlNode {
          "anchor": null,
          "children": Array [
            TextNode {
              "domNode": <p>
                以 MarkdownView 为例，MarkdownView 组件接收 mdast 数据，随后通过 props 传递给各 renderer 组件，这种从父组件传递数据到子组件的模式是
                <b>
                  单向数据流
                </b>
                。
              </p>,
              "type": "text",
              "value": "以 MarkdownView 为例，MarkdownView 组件接收 mdast 数据，随后通过 props 传递给各 renderer 组件，这种从父组件传递数据到子组件的模式是单向数据流。",
            },
            TextNode {
              "domNode": <pre>
                <code
                  class="language-text"
                >
                    &lt;MarkdownView&gt;  # 将 props 分发下去
    \\          \\
    &lt;heading&gt;   &lt;text&gt;
                </code>
              </pre>,
              "type": "code",
              "value": "  <MarkdownView>  # 将 props 分发下去
    \\\\          \\\\
    <heading>   <text>",
            },
            TextNode {
              "domNode": <p>
                由于这种模式是从上往下的数据传递，如涉及到子组件的更新，一般需要通过父组件数据改变而触发，也就是外部的 Props 修改来驱动更新；
              </p>,
              "type": "text",
              "value": "由于这种模式是从上往下的数据传递，如涉及到子组件的更新，一般需要通过父组件数据改变而触发，也就是外部的 Props 修改来驱动更新；",
            },
            TextNode {
              "domNode": <p>
                如下代码，实现了点击 text 文本后，更新渲染为 input，用于更新 text.value：
              </p>,
              "type": "text",
              "value": "如下代码，实现了点击 text 文本后，更新渲染为 input，用于更新 text.value：",
            },
            TextNode {
              "domNode": <pre>
                <code
                  class="language-js"
                >
                  <span
                    class="kr"
                  >
                    const
                  </span>
                   
                  <span
                    class="nx"
                  >
                    Text
                  </span>
                   
                  <span
                    class="o"
                  >
                    =
                  </span>
                   
                  <span
                    class="p"
                  >
                    (
                  </span>
                  <span
                    class="nx"
                  >
                    props
                  </span>
                  <span
                    class="p"
                  >
                    )
                  </span>
                   
                  <span
                    class="p"
                  >
                    =&gt;
                  </span>
                   
                  <span
                    class="p"
                  >
                    {
                  </span>
                  
  
                  <span
                    class="kr"
                  >
                    const
                  </span>
                   
                  <span
                    class="p"
                  >
                    [
                  </span>
                  <span
                    class="nx"
                  >
                    editing
                  </span>
                  <span
                    class="p"
                  >
                    ,
                  </span>
                   
                  <span
                    class="nx"
                  >
                    setEditing
                  </span>
                  <span
                    class="p"
                  >
                    ]
                  </span>
                   
                  <span
                    class="o"
                  >
                    =
                  </span>
                   
                  <span
                    class="nx"
                  >
                    React
                  </span>
                  <span
                    class="p"
                  >
                    .
                  </span>
                  <span
                    class="nx"
                  >
                    useState
                  </span>
                  <span
                    class="p"
                  >
                    (
                  </span>
                  <span
                    class="kc"
                  >
                    false
                  </span>
                  <span
                    class="p"
                  >
                    );
                  </span>
                  
  
                  <span
                    class="kr"
                  >
                    const
                  </span>
                   
                  <span
                    class="p"
                  >
                    [
                  </span>
                  <span
                    class="nx"
                  >
                    value
                  </span>
                  <span
                    class="p"
                  >
                    ,
                  </span>
                   
                  <span
                    class="nx"
                  >
                    setValue
                  </span>
                  <span
                    class="p"
                  >
                    ]
                  </span>
                   
                  <span
                    class="o"
                  >
                    =
                  </span>
                   
                  <span
                    class="nx"
                  >
                    React
                  </span>
                  <span
                    class="p"
                  >
                    .
                  </span>
                  <span
                    class="nx"
                  >
                    useState
                  </span>
                  <span
                    class="p"
                  >
                    (
                  </span>
                  <span
                    class="nx"
                  >
                    props
                  </span>
                  <span
                    class="p"
                  >
                    .
                  </span>
                  <span
                    class="nx"
                  >
                    node
                  </span>
                  <span
                    class="p"
                  >
                    .
                  </span>
                  <span
                    class="nx"
                  >
                    value
                  </span>
                  <span
                    class="p"
                  >
                    );
                  </span>
                  
  
                  <span
                    class="nx"
                  >
                    React
                  </span>
                  <span
                    class="p"
                  >
                    .
                  </span>
                  <span
                    class="nx"
                  >
                    useEffect
                  </span>
                  <span
                    class="p"
                  >
                    (()
                  </span>
                   
                  <span
                    class="p"
                  >
                    =&gt;
                  </span>
                   
                  <span
                    class="p"
                  >
                    {
                  </span>
                  
    
                  <span
                    class="nx"
                  >
                    setValue
                  </span>
                  <span
                    class="p"
                  >
                    (
                  </span>
                  <span
                    class="nx"
                  >
                    props
                  </span>
                  <span
                    class="p"
                  >
                    .
                  </span>
                  <span
                    class="nx"
                  >
                    node
                  </span>
                  <span
                    class="p"
                  >
                    .
                  </span>
                  <span
                    class="nx"
                  >
                    value
                  </span>
                  <span
                    class="p"
                  >
                    );
                  </span>
                  
  
                  <span
                    class="p"
                  >
                    },
                  </span>
                   
                  <span
                    class="p"
                  >
                    [
                  </span>
                  <span
                    class="nx"
                  >
                    props
                  </span>
                  <span
                    class="p"
                  >
                    .
                  </span>
                  <span
                    class="nx"
                  >
                    node
                  </span>
                  <span
                    class="p"
                  >
                    .
                  </span>
                  <span
                    class="nx"
                  >
                    value
                  </span>
                  <span
                    class="p"
                  >
                    ]);
                  </span>
                  

  
                  <span
                    class="k"
                  >
                    if
                  </span>
                   
                  <span
                    class="p"
                  >
                    (
                  </span>
                  <span
                    class="nx"
                  >
                    editing
                  </span>
                  <span
                    class="p"
                  >
                    )
                  </span>
                   
                  <span
                    class="p"
                  >
                    {
                  </span>
                  
    
                  <span
                    class="k"
                  >
                    return
                  </span>
                   
                  <span
                    class="p"
                  >
                    (
                  </span>
                  
      
                  <span
                    class="o"
                  >
                    &lt;
                  </span>
                  <span
                    class="nx"
                  >
                    input
                  </span>
                  
        
                  <span
                    class="nx"
                  >
                    autoFocus
                  </span>
                  
        
                  <span
                    class="nx"
                  >
                    onBlur
                  </span>
                  <span
                    class="o"
                  >
                    =
                  </span>
                  <span
                    class="p"
                  >
                    {()
                  </span>
                   
                  <span
                    class="p"
                  >
                    =&gt;
                  </span>
                   
                  <span
                    class="p"
                  >
                    {
                  </span>
                  
          
                  <span
                    class="nx"
                  >
                    setEditing
                  </span>
                  <span
                    class="p"
                  >
                    (
                  </span>
                  <span
                    class="kc"
                  >
                    false
                  </span>
                  <span
                    class="p"
                  >
                    );
                  </span>
                  
          
                  <span
                    class="c1"
                  >
                    // 注意这里

                  </span>
                  <span
                    class="c1"
                  />
                            
                  <span
                    class="nx"
                  >
                    props
                  </span>
                  <span
                    class="p"
                  >
                    .
                  </span>
                  <span
                    class="nx"
                  >
                    node
                  </span>
                  <span
                    class="p"
                  >
                    .
                  </span>
                  <span
                    class="nx"
                  >
                    value
                  </span>
                   
                  <span
                    class="o"
                  >
                    =
                  </span>
                   
                  <span
                    class="nx"
                  >
                    value
                  </span>
                  <span
                    class="p"
                  >
                    ;
                  </span>
                  
        
                  <span
                    class="p"
                  >
                    }}
                  </span>
                  
        
                  <span
                    class="nx"
                  >
                    value
                  </span>
                  <span
                    class="o"
                  >
                    =
                  </span>
                  <span
                    class="p"
                  >
                    {
                  </span>
                  <span
                    class="nx"
                  >
                    value
                  </span>
                  <span
                    class="p"
                  >
                    }
                  </span>
                  
        
                  <span
                    class="nx"
                  >
                    onChange
                  </span>
                  <span
                    class="o"
                  >
                    =
                  </span>
                  <span
                    class="p"
                  >
                    {(
                  </span>
                  <span
                    class="nx"
                  >
                    e
                  </span>
                  <span
                    class="p"
                  >
                    )
                  </span>
                   
                  <span
                    class="p"
                  >
                    =&gt;
                  </span>
                   
                  <span
                    class="nx"
                  >
                    setValue
                  </span>
                  <span
                    class="p"
                  >
                    (
                  </span>
                  <span
                    class="nx"
                  >
                    e
                  </span>
                  <span
                    class="p"
                  >
                    .
                  </span>
                  <span
                    class="nx"
                  >
                    target
                  </span>
                  <span
                    class="p"
                  >
                    .
                  </span>
                  <span
                    class="nx"
                  >
                    value
                  </span>
                  <span
                    class="p"
                  >
                    )}
                  </span>
                  
      
                  <span
                    class="o"
                  >
                    /&gt;
                  </span>
                  
    
                  <span
                    class="p"
                  >
                    );
                  </span>
                  
  
                  <span
                    class="p"
                  >
                    }
                  </span>
                  

  
                  <span
                    class="k"
                  >
                    return
                  </span>
                   
                  <span
                    class="o"
                  >
                    &lt;
                  </span>
                  <span
                    class="nx"
                  >
                    span
                  </span>
                   
                  <span
                    class="nx"
                  >
                    onClick
                  </span>
                  <span
                    class="o"
                  >
                    =
                  </span>
                  <span
                    class="p"
                  >
                    {()
                  </span>
                   
                  <span
                    class="p"
                  >
                    =&gt;
                  </span>
                   
                  <span
                    class="nx"
                  >
                    setEditing
                  </span>
                  <span
                    class="p"
                  >
                    (
                  </span>
                  <span
                    class="kc"
                  >
                    true
                  </span>
                  <span
                    class="p"
                  >
                    )}
                  </span>
                  <span
                    class="o"
                  >
                    &gt;
                  </span>
                  <span
                    class="p"
                  >
                    {
                  </span>
                  <span
                    class="nx"
                  >
                    props
                  </span>
                  <span
                    class="p"
                  >
                    .
                  </span>
                  <span
                    class="nx"
                  >
                    node
                  </span>
                  <span
                    class="p"
                  >
                    .
                  </span>
                  <span
                    class="nx"
                  >
                    value
                  </span>
                  <span
                    class="p"
                  >
                    }
                  </span>
                  <span
                    class="o"
                  >
                    &lt;
                  </span>
                  <span
                    class="err"
                  >
                    /span&gt;;
                  </span>
                  

                  <span
                    class="p"
                  >
                    };
                  </span>
                  

                </code>
              </pre>,
              "type": "code",
              "value": "const Text = (props) => {
  const [editing, setEditing] = React.useState(false);
  const [value, setValue] = React.useState(props.node.value);
  React.useEffect(() => {
    setValue(props.node.value);
  }, [props.node.value]);

  if (editing) {
    return (
      <input
        autoFocus
        onBlur={() => {
          setEditing(false);
          // 注意这里
          props.node.value = value;
        }}
        value={value}
        onChange={(e) => setValue(e.target.value)}
      />
    );
  }

  return <span onClick={() => setEditing(true)}>{props.node.value}</span>;
};
",
            },
            TextNode {
              "domNode": <p>
                具体代码见如下中的 mutable 模式：
              </p>,
              "type": "text",
              "value": "具体代码见如下中的 mutable 模式：",
            },
            TextNode {
              "domNode": <p>
                效果是，blur 之后修改的 value 是可以渲染出来的，但是如果我们把代码修改成如下：
              </p>,
              "type": "text",
              "value": "效果是，blur 之后修改的 value 是可以渲染出来的，但是如果我们把代码修改成如下：",
            },
            TextNode {
              "domNode": <pre>
                <code
                  class="language-text"
                >
                  onBlur={() =&gt; {
  setEditing(false);
  // 注意这里
  requestAnimationFrame(() =&gt; {
    props.node.value = value;
  })
}}
                </code>
              </pre>,
              "type": "code",
              "value": "onBlur={() => {
  setEditing(false);
  // 注意这里
  requestAnimationFrame(() => {
    props.node.value = value;
  })
}}",
            },
            TextNode {
              "domNode": <p>
                结果 value 不能被同步渲染出来，这是因为 
              </p>,
              "type": "text",
              "value": "结果 value 不能被同步渲染出来，这是因为 ",
            },
            TextNode {
              "domNode": <pre>
                <code
                  class="language-text"
                >
                  props.node.value = value;
                </code>
              </pre>,
              "type": "code",
              "value": "props.node.value = value;",
            },
            TextNode {
              "domNode": <p>
                这种 
                <b>
                  mutable
                </b>
                 操作，不能够触发组件的更新，而第一个例子之所以能够起效果，是因为 onBlur 中 setEditing(false) 触发更新是异步的，React 会进行批更新优化，这个话题后续有空可以细谈。
              </p>,
              "type": "text",
              "value": "这种 mutable 操作，不能够触发组件的更新，而第一个例子之所以能够起效果，是因为 onBlur 中 setEditing(false) 触发更新是异步的，React 会进行批更新优化，这个话题后续有空可以细谈。",
            },
            TextNode {
              "domNode": <p>
                什么 mutable 操作呢？如下：
              </p>,
              "type": "text",
              "value": "什么 mutable 操作呢？如下：",
            },
            TextNode {
              "domNode": <pre>
                <code
                  class="language-js"
                >
                  <span
                    class="kr"
                  >
                    const
                  </span>
                   
                  <span
                    class="nx"
                  >
                    ref
                  </span>
                   
                  <span
                    class="o"
                  >
                    =
                  </span>
                   
                  <span
                    class="p"
                  >
                    {
                  </span>
                   
                  <span
                    class="nx"
                  >
                    name
                  </span>
                  <span
                    class="o"
                  >
                    :
                  </span>
                   
                  <span
                    class="s1"
                  >
                    'John'
                  </span>
                   
                  <span
                    class="p"
                  >
                    }
                  </span>
                  

                  <span
                    class="c1"
                  >
                    // mutable 操作，执行后，ref 引用未发生改变

                  </span>
                  <span
                    class="c1"
                  />
                  <span
                    class="nx"
                  >
                    ref
                  </span>
                  <span
                    class="p"
                  >
                    .
                  </span>
                  <span
                    class="nx"
                  >
                    name
                  </span>
                   
                  <span
                    class="o"
                  >
                    =
                  </span>
                   
                  <span
                    class="s1"
                  >
                    'Tom'
                  </span>
                  

                  <span
                    class="c1"
                  >
                    // immutable 操作，执行后，ref 引用发生改变

                  </span>
                  <span
                    class="c1"
                  />
                  <span
                    class="kr"
                  >
                    const
                  </span>
                   
                  <span
                    class="nx"
                  >
                    newRef
                  </span>
                   
                  <span
                    class="o"
                  >
                    =
                  </span>
                   
                  <span
                    class="p"
                  >
                    {
                  </span>
                   
                  <span
                    class="p"
                  >
                    ...
                  </span>
                  <span
                    class="nx"
                  >
                    ref
                  </span>
                  <span
                    class="p"
                  >
                    ,
                  </span>
                   
                  <span
                    class="nx"
                  >
                    name
                  </span>
                  <span
                    class="o"
                  >
                    :
                  </span>
                   
                  <span
                    class="s1"
                  >
                    'Tom'
                  </span>
                   
                  <span
                    class="p"
                  >
                    }
                  </span>
                  

                </code>
              </pre>,
              "type": "code",
              "value": "const ref = { name: 'John' }
// mutable 操作，执行后，ref 引用未发生改变
ref.name = 'Tom'
// immutable 操作，执行后，ref 引用发生改变
const newRef = { ...ref, name: 'Tom' }
",
            },
            TextNode {
              "domNode": <p>
                也就是说在修改完 props.node.value 后，才触发 render 更新，所以可以生效；而 requestAnimationFrame 导致 props.node.value 修改发生在 render 之后；
              </p>,
              "type": "text",
              "value": "也就是说在修改完 props.node.value 后，才触发 render 更新，所以可以生效；而 requestAnimationFrame 导致 props.node.value 修改发生在 render 之后；",
            },
            TextNode {
              "domNode": <p>
                基于 React 单向数据流原理，那么正确的 React 代码书写应该是如何的呢？
              </p>,
              "type": "text",
              "value": "基于 React 单向数据流原理，那么正确的 React 代码书写应该是如何的呢？",
            },
          ],
          "domNode": <h3>
            React 单向数据流和组件更新模式
          </h3>,
          "level": 2,
          "type": "lvl",
          "value": "React 单向数据流和组件更新模式",
        },
        LvlNode {
          "anchor": null,
          "children": Array [
            TextNode {
              "domNode": <p>
                根据 React 单向数据流原理，应该修改最外层的 mdast，然后从上向下的触发子组件渲染，如下父子组件渲染关系：
              </p>,
              "type": "text",
              "value": "根据 React 单向数据流原理，应该修改最外层的 mdast，然后从上向下的触发子组件渲染，如下父子组件渲染关系：",
            },
            TextNode {
              "domNode": <pre>
                <code
                  class="language-text"
                >
                       A
   /   \\
  B     C
 / \\     \\
D   E     F
                </code>
              </pre>,
              "type": "code",
              "value": "     A
   /   \\\\
  B     C
 / \\\\     \\\\
D   E     F",
            },
            TextNode {
              "domNode": <p>
                MDAST 修改后，A 组件渲染驱动 B / C，B 驱动 D / E，C 驱动 F；但是这样也会带来一个问题：每一次 MDAST 修改，A 组件触发渲染，都会导致所有子组件进行渲染更新，对于比较庞大的组件树来说，效率低。
              </p>,
              "type": "text",
              "value": "MDAST 修改后，A 组件渲染驱动 B / C，B 驱动 D / E，C 驱动 F；但是这样也会带来一个问题：每一次 MDAST 修改，A 组件触发渲染，都会导致所有子组件进行渲染更新，对于比较庞大的组件树来说，效率低。",
            },
            TextNode {
              "domNode": <p>
                所以 React 引入了 
                <b>
                  shouldComponentUpdate
                </b>
                 生命周期，下文用 scu 代替
              </p>,
              "type": "text",
              "value": "所以 React 引入了 shouldComponentUpdate 生命周期，下文用 scu 代替",
            },
            TextNode {
              "domNode": <p>
                在 MDAST 修改后，A 组件触发 scu，判断 A 组件可以 render 之后，B / C 组件触发 scu，依次进行下去。
              </p>,
              "type": "text",
              "value": "在 MDAST 修改后，A 组件触发 scu，判断 A 组件可以 render 之后，B / C 组件触发 scu，依次进行下去。",
            },
            TextNode {
              "domNode": <p>
                所以为了提升效率，一般都会浅比较：新旧的 props 和 state， 来判断是否需要进行更新。因此一般会使用 
                <a
                  class=" wrap external"
                  data-za-detail-view-id="1043"
                  href="https://link.zhihu.com/?target=https%3A//immutable-js.github.io/immutable-js/"
                  rel="nofollow noreferrer"
                  target="_blank"
                >
                  immutable.js
                </a>
                 或 
                <a
                  class=" wrap external"
                  data-za-detail-view-id="1043"
                  href="https://link.zhihu.com/?target=https%3A//github.com/immerjs/immer"
                  rel="nofollow noreferrer"
                  target="_blank"
                >
                  immer
                </a>
                 来对数据进行更新，但是最小程度的修改引用；
              </p>,
              "type": "text",
              "value": "所以为了提升效率，一般都会浅比较：新旧的 props 和 state， 来判断是否需要进行更新。因此一般会使用 immutable.js 或 immer 来对数据进行更新，但是最小程度的修改引用；",
            },
            TextNode {
              "domNode": <p>
                如下图，演示的是 immutable 库修改数据所做的事情：
              </p>,
              "type": "text",
              "value": "如下图，演示的是 immutable 库修改数据所做的事情：",
            },
            TextNode {
              "domNode": <p>
                可以看到对于一个深层嵌套的数据，修改黄色节点，会导致其祖先节点引用的修改，但其他节点引用都不会修改。
              </p>,
              "type": "text",
              "value": "可以看到对于一个深层嵌套的数据，修改黄色节点，会导致其祖先节点引用的修改，但其他节点引用都不会修改。",
            },
            TextNode {
              "domNode": <p>
                这样对应在组件中，每次修改节点数据，导致根组件数据改变，进而触发单向数据流渲染，对于已经书写妥当 scu 的组件，其相关的数据只要没有发生改变，是不会触发渲染更新的，减少不必要的渲染更新，提高性能，具体可以参考下例中的 immutable 模式
              </p>,
              "type": "text",
              "value": "这样对应在组件中，每次修改节点数据，导致根组件数据改变，进而触发单向数据流渲染，对于已经书写妥当 scu 的组件，其相关的数据只要没有发生改变，是不会触发渲染更新的，减少不必要的渲染更新，提高性能，具体可以参考下例中的 immutable 模式",
            },
            TextNode {
              "domNode": <p>
                 对于单向数据流渲染更新，需要注意：
              </p>,
              "type": "text",
              "value": " 对于单向数据流渲染更新，需要注意：",
            },
            TextNode {
              "domNode": <ol>
                <li>
                  一个 react 组件才有自己的特定生命周期。如果对于MarkdownView 组件中各个节点数据的渲染统一都是通过一个个的方法体渲染，是不会
                  <b>
                    提高更新颗粒度
                  </b>
                  的，所以需要尽量多的拆分组件。
                </li>
                <li>
                  错误的 scu 书写会导致渲染更新错误
                </li>
              </ol>,
              "type": "text",
              "value": "一个 react 组件才有自己的特定生命周期。如果对于MarkdownView 组件中各个节点数据的渲染统一都是通过一个个的方法体渲染，是不会提高更新颗粒度的，所以需要尽量多的拆分组件。错误的 scu 书写会导致渲染更新错误",
            },
            TextNode {
              "domNode": <p>
                那么基于单向数据流的更新渲染，有没有它的问题存在呢？
              </p>,
              "type": "text",
              "value": "那么基于单向数据流的更新渲染，有没有它的问题存在呢？",
            },
            TextNode {
              "domNode": <p>
                答案是有的，随着数据量的增加，嵌套深度增加，每一次的底层组件数据修改，都会回溯到根组件的更新，每一次更新渲染也需要不断的 scu 和从父到子的 render ，即使是在 react diff 、react fiber 的优化下，还是会有对应的瓶颈出现。那么有没有一种不需要回溯渲染的方式呢？
              </p>,
              "type": "text",
              "value": "答案是有的，随着数据量的增加，嵌套深度增加，每一次的底层组件数据修改，都会回溯到根组件的更新，每一次更新渲染也需要不断的 scu 和从父到子的 render ，即使是在 react diff 、react fiber 的优化下，还是会有对应的瓶颈出现。那么有没有一种不需要回溯渲染的方式呢？",
            },
            TextNode {
              "domNode": <p>
                答案依然是有的。
              </p>,
              "type": "text",
              "value": "答案依然是有的。",
            },
          ],
          "domNode": <h3>
            正确的基于 React 单向数据流的代码
          </h3>,
          "level": 2,
          "type": "lvl",
          "value": "正确的基于 React 单向数据流的代码",
        },
      ],
      "domNode": <h2>
        设计考虑
      </h2>,
      "level": 1,
      "type": "lvl",
      "value": "设计考虑",
    },
    LvlNode {
      "anchor": null,
      "children": Array [
        TextNode {
          "domNode": <p>
            使用 mobx 可以避免父到子的回溯渲染，如下例子中的 mutable mobx 模式
          </p>,
          "type": "text",
          "value": "使用 mobx 可以避免父到子的回溯渲染，如下例子中的 mutable mobx 模式",
        },
        TextNode {
          "domNode": <p>
             mobx react 的更新渲染机制于官方的单向数据触发的渲染不同，mobx 会将 mdast 变成一个被观察的数据，在每一次 mutable 修改中，都会被观察到数据的改动。
          </p>,
          "type": "text",
          "value": " mobx react 的更新渲染机制于官方的单向数据触发的渲染不同，mobx 会将 mdast 变成一个被观察的数据，在每一次 mutable 修改中，都会被观察到数据的改动。",
        },
        TextNode {
          "domNode": <p>
            一旦在发现同步渲染所访问到的数据发生改动，就会主动的触发组件的更新，如 forceUpdate，这样一来 mutable 的操作修改，只会影响到使用了该数据的组件，这些组件进行主动的更新，而不会回溯进行父到子的更新渲染，大大减少了不必要的 suc 和 render
          </p>,
          "type": "text",
          "value": "一旦在发现同步渲染所访问到的数据发生改动，就会主动的触发组件的更新，如 forceUpdate，这样一来 mutable 的操作修改，只会影响到使用了该数据的组件，这些组件进行主动的更新，而不会回溯进行父到子的更新渲染，大大减少了不必要的 suc 和 render",
        },
      ],
      "domNode": <h2>
        终极杀招 Mobx
      </h2>,
      "level": 1,
      "type": "lvl",
      "value": "终极杀招 Mobx",
    },
    LvlNode {
      "anchor": null,
      "children": Array [
        TextNode {
          "domNode": <p>
            综上，需要书写一个高性能的复杂组件，需要考虑的点颇多，最终有两种方式可供大家选择：
          </p>,
          "type": "text",
          "value": "综上，需要书写一个高性能的复杂组件，需要考虑的点颇多，最终有两种方式可供大家选择：",
        },
        TextNode {
          "domNode": <ol>
            <li>
              基于 immutable 库和单向数据流 和 适量的组件拆分、scu 的书写来实现被动的更新。如 slate.js 的实现
            </li>
            <li>
              基于 mobx 和适量的 observer 组件单元 来实现组件自驱的更新
            </li>
          </ol>,
          "type": "text",
          "value": "基于 immutable 库和单向数据流 和 适量的组件拆分、scu 的书写来实现被动的更新。如 slate.js 的实现基于 mobx 和适量的 observer 组件单元 来实现组件自驱的更新",
        },
        TextNode {
          "domNode": <p>
            后面贴一个其他同学做的测试数据，可以看到 
            <b>
              mobx 性能更佳
            </b>
          </p>,
          "type": "text",
          "value": "后面贴一个其他同学做的测试数据，可以看到 mobx 性能更佳",
        },
      ],
      "domNode": <h2>
        总结
      </h2>,
      "level": 1,
      "type": "lvl",
      "value": "总结",
    },
  ],
  "global": Map {},
  "type": "document",
  "value": null,
}
`;

exports[`parseElementTree spec 1`] = `
DocumentNode {
  "children": Array [
    LvlNode {
      "anchor": "user-content-installation",
      "children": Array [
        TextNode {
          "domNode": <p>
            It's recommended to install via 
            <a
              href="https://github.com/isaacs/npm/"
              rel="nofollow"
            >
              npm
            </a>
            :
          </p>,
          "type": "text",
          "value": "It's recommended to install via npm:",
        },
        TextNode {
          "domNode": <pre
            class="editor editor-colors"
          >
            <div
              class="line"
            >
              <span
                class="source shell"
              >
                <span>
                  $ npm install -g robots
                </span>
              </span>
            </div>
          </pre>,
          "type": "text",
          "value": "$ npm install -g robots",
        },
      ],
      "domNode": <h2>
        <a
          aria-hidden="true"
          class="deep-link"
          href="#installation"
          id="user-content-installation"
          rel="nofollow"
        >
          <svg
            aria-hidden="true"
            class="deep-link-icon"
            height="16"
            version="1.1"
            viewBox="0 0 16 16"
            width="16"
          >
            <path
              d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
            />
          </svg>
        </a>
        Installation
      </h2>,
      "level": 2,
      "type": "lvl",
      "value": "Installation",
    },
    LvlNode {
      "anchor": "user-content-usage",
      "children": Array [
        TextNode {
          "domNode": <p>
            Here's an example of using robots.js:
          </p>,
          "type": "text",
          "value": "Here's an example of using robots.js:",
        },
        TextNode {
          "domNode": <pre
            class="editor editor-colors"
          >
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="storage type js"
                >
                  <span>
                    var
                  </span>
                </span>
                <span>
                   robots 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta function-call js"
                >
                  <span
                    class="support function js"
                  >
                    <span>
                      require
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span>
                        robots
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                    
                </span>
                <span
                  class="meta delimiter object comma js"
                >
                  <span>
                    ,
                  </span>
                </span>
                <span>
                   parser 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta class instance constructor js"
                >
                  <span
                    class="keyword operator js"
                  >
                    <span>
                      new
                    </span>
                  </span>
                  <span>
                     
                  </span>
                  <span
                    class="entity name type instance js"
                  >
                    <span>
                      robots
                    </span>
                    <span
                      class="meta delimiter period js"
                    >
                      <span>
                        .
                      </span>
                    </span>
                    <span>
                      RobotsParser
                    </span>
                  </span>
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    (
                  </span>
                  <span>
                    )
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                   
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="variable other object js"
                >
                  <span>
                    parser
                  </span>
                </span>
                <span
                  class="meta js"
                >
                  <span
                    class="meta delimiter method period js"
                  >
                    <span>
                      .
                    </span>
                  </span>
                  <span
                    class="entity name function js"
                  >
                    <span>
                      setUrl
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span
                        class="markup underline link hyperlink"
                      >
                        <span>
                          http://nodeguide.ru/robots.txt
                        </span>
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="meta delimiter object comma js"
                    >
                      <span>
                        ,
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta function js"
                    >
                      <span
                        class="storage type function js"
                      >
                        <span>
                          function
                        </span>
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            parser
                          </span>
                        </span>
                        <span
                          class="meta delimiter object comma js"
                        >
                          <span>
                            ,
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            success
                          </span>
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="punctuation definition function begin curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                        
                    </span>
                    <span
                      class="keyword control js"
                    >
                      <span>
                        if
                      </span>
                    </span>
                    <span
                      class="meta brace round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span>
                      success
                    </span>
                    <span
                      class="meta brace round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta brace curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                          
                    </span>
                    <span
                      class="variable other object js"
                    >
                      <span>
                        parser
                      </span>
                    </span>
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta delimiter method period js"
                      >
                        <span>
                          .
                        </span>
                      </span>
                      <span
                        class="entity name function js"
                      >
                        <span>
                          canFetch
                        </span>
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="string quoted single js"
                        >
                          <span
                            class="punctuation definition string begin js"
                          >
                            <span>
                              '
                            </span>
                          </span>
                          <span>
                            *
                          </span>
                          <span
                            class="punctuation definition string end js"
                          >
                            <span>
                              '
                            </span>
                          </span>
                        </span>
                        <span
                          class="meta delimiter object comma js"
                        >
                          <span>
                            ,
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="string quoted single js"
                        >
                          <span
                            class="punctuation definition string begin js"
                          >
                            <span>
                              '
                            </span>
                          </span>
                          <span>
                            /doc/dailyjs-nodepad/
                          </span>
                          <span
                            class="punctuation definition string end js"
                          >
                            <span>
                              '
                            </span>
                          </span>
                        </span>
                        <span
                          class="meta delimiter object comma js"
                        >
                          <span>
                            ,
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="meta function js"
                        >
                          <span
                            class="storage type function js"
                          >
                            <span>
                              function
                            </span>
                          </span>
                          <span>
                             
                          </span>
                          <span
                            class="meta js"
                          >
                            <span
                              class="punctuation definition begin round js"
                            >
                              <span>
                                (
                              </span>
                            </span>
                            <span
                              class="variable function js"
                            >
                              <span>
                                access
                              </span>
                            </span>
                            <span
                              class="punctuation definition end round js"
                            >
                              <span>
                                )
                              </span>
                            </span>
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="punctuation definition function begin curly js"
                        >
                          <span>
                            {
                          </span>
                        </span>
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta js"
                      >
                        <span>
                                
                        </span>
                        <span
                          class="keyword control js"
                        >
                          <span>
                            if
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="meta brace round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span>
                          access
                        </span>
                        <span
                          class="meta brace round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="meta brace curly js"
                        >
                          <span>
                            {
                          </span>
                        </span>
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta js"
                      >
                        <span>
                                  
                        </span>
                        <span
                          class="comment line double-slash js"
                        >
                          <span
                            class="punctuation definition comment js"
                          >
                            <span>
                              //
                            </span>
                          </span>
                          <span>
                             parse url
                          </span>
                        </span>
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta js"
                      >
                        <span>
                                
                        </span>
                        <span
                          class="meta brace curly js"
                        >
                          <span>
                            }
                          </span>
                        </span>
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta js"
                      >
                        <span>
                              
                        </span>
                        <span
                          class="punctuation definition function end curly js"
                        >
                          <span>
                            }
                          </span>
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation terminator statement js"
                    >
                      <span>
                        ;
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                        
                    </span>
                    <span
                      class="meta brace curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition function end curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
          </pre>,
          "type": "text",
          "value": "var robots = require('robots')  , parser = new robots.RobotsParser(); parser.setUrl('http://nodeguide.ru/robots.txt', function(parser, success) {  if(success) {    parser.canFetch('*', '/doc/dailyjs-nodepad/', function (access) {      if (access) {        // parse url      }    });  }});",
        },
        TextNode {
          "domNode": <p>
            Default crawler user-agent is:
          </p>,
          "type": "text",
          "value": "Default crawler user-agent is:",
        },
        TextNode {
          "domNode": <pre>
            <code>
              Mozilla/5.0 (X11; Linux i686; rv:5.0) Gecko/20100101 Firefox/5.0

            </code>
          </pre>,
          "type": "text",
          "value": "Mozilla/5.0 (X11; Linux i686; rv:5.0) Gecko/20100101 Firefox/5.0
",
        },
        TextNode {
          "domNode": <p>
            Here's an example of using another user-agent and more detailed callback:
          </p>,
          "type": "text",
          "value": "Here's an example of using another user-agent and more detailed callback:",
        },
        TextNode {
          "domNode": <pre
            class="editor editor-colors"
          >
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="storage type js"
                >
                  <span>
                    var
                  </span>
                </span>
                <span>
                   robots 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta function-call js"
                >
                  <span
                    class="support function js"
                  >
                    <span>
                      require
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span>
                        robots
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                    
                </span>
                <span
                  class="meta delimiter object comma js"
                >
                  <span>
                    ,
                  </span>
                </span>
                <span>
                   parser 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta class instance constructor js"
                >
                  <span
                    class="keyword operator js"
                  >
                    <span>
                      new
                    </span>
                  </span>
                  <span>
                     
                  </span>
                  <span
                    class="entity name type instance js"
                  >
                    <span>
                      robots
                    </span>
                    <span
                      class="meta delimiter period js"
                    >
                      <span>
                        .
                      </span>
                    </span>
                    <span>
                      RobotsParser
                    </span>
                  </span>
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    (
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                                  
                </span>
                <span
                  class="string quoted single js"
                >
                  <span
                    class="punctuation definition string begin js"
                  >
                    <span>
                      '
                    </span>
                  </span>
                  <span
                    class="markup underline link hyperlink"
                  >
                    <span>
                      http://nodeguide.ru/robots.txt
                    </span>
                  </span>
                  <span
                    class="punctuation definition string end js"
                  >
                    <span>
                      '
                    </span>
                  </span>
                </span>
                <span
                  class="meta delimiter object comma js"
                >
                  <span>
                    ,
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                                  
                </span>
                <span
                  class="string quoted single js"
                >
                  <span
                    class="punctuation definition string begin js"
                  >
                    <span>
                      '
                    </span>
                  </span>
                  <span>
                    Mozilla/5.0 (compatible; RobotTxtBot/1.0)
                  </span>
                  <span
                    class="punctuation definition string end js"
                  >
                    <span>
                      '
                    </span>
                  </span>
                </span>
                <span
                  class="meta delimiter object comma js"
                >
                  <span>
                    ,
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                                  after_parse
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                              
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    )
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                              
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta function js"
                >
                  <span
                    class="storage type function js"
                  >
                    <span>
                      function
                    </span>
                  </span>
                  <span>
                     
                  </span>
                  <span
                    class="entity name function js"
                  >
                    <span>
                      after_parse
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="variable function js"
                    >
                      <span>
                        parser
                      </span>
                    </span>
                    <span
                      class="meta delimiter object comma js"
                    >
                      <span>
                        ,
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="variable function js"
                    >
                      <span>
                        success
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="punctuation definition function begin curly js"
                >
                  <span>
                    {
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                    
                </span>
                <span
                  class="keyword control js"
                >
                  <span>
                    if
                  </span>
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    (
                  </span>
                </span>
                <span>
                  success
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    )
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta brace curly js"
                >
                  <span>
                    {
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="variable other object js"
                >
                  <span>
                    parser
                  </span>
                </span>
                <span
                  class="meta js"
                >
                  <span
                    class="meta delimiter method period js"
                  >
                    <span>
                      .
                    </span>
                  </span>
                  <span
                    class="entity name function js"
                  >
                    <span>
                      canFetch
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span>
                        *
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="meta delimiter object comma js"
                    >
                      <span>
                        ,
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span>
                        /doc/dailyjs-nodepad/
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="meta delimiter object comma js"
                    >
                      <span>
                        ,
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta function js"
                    >
                      <span
                        class="storage type function js"
                      >
                        <span>
                          function
                        </span>
                      </span>
                      <span>
                         
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            access
                          </span>
                        </span>
                        <span
                          class="meta delimiter object comma js"
                        >
                          <span>
                            ,
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            url
                          </span>
                        </span>
                        <span
                          class="meta delimiter object comma js"
                        >
                          <span>
                            ,
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            reason
                          </span>
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="punctuation definition function begin curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                            
                    </span>
                    <span
                      class="keyword control js"
                    >
                      <span>
                        if
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta brace round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span>
                      access
                    </span>
                    <span
                      class="meta brace round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta brace curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                              
                    </span>
                    <span
                      class="entity name type object console js"
                    >
                      <span>
                        console
                      </span>
                    </span>
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta delimiter method period js"
                      >
                        <span>
                          .
                        </span>
                      </span>
                      <span
                        class="support function console js"
                      >
                        <span>
                          log
                        </span>
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="string quoted single js"
                        >
                          <span
                            class="punctuation definition string begin js"
                          >
                            <span>
                              '
                            </span>
                          </span>
                          <span>
                             url: 
                          </span>
                          <span
                            class="punctuation definition string end js"
                          >
                            <span>
                              '
                            </span>
                          </span>
                        </span>
                        <span
                          class="keyword operator js"
                        >
                          <span>
                            +
                          </span>
                        </span>
                        <span>
                          url
                        </span>
                        <span
                          class="keyword operator js"
                        >
                          <span>
                            +
                          </span>
                        </span>
                        <span
                          class="string quoted single js"
                        >
                          <span
                            class="punctuation definition string begin js"
                          >
                            <span>
                              '
                            </span>
                          </span>
                          <span>
                            , access: 
                          </span>
                          <span
                            class="punctuation definition string end js"
                          >
                            <span>
                              '
                            </span>
                          </span>
                        </span>
                        <span
                          class="keyword operator js"
                        >
                          <span>
                            +
                          </span>
                        </span>
                        <span>
                          access
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation terminator statement js"
                    >
                      <span>
                        ;
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                              
                    </span>
                    <span
                      class="comment line double-slash js"
                    >
                      <span
                        class="punctuation definition comment js"
                      >
                        <span>
                          //
                        </span>
                      </span>
                      <span>
                         parse url ...
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                            
                    </span>
                    <span
                      class="meta brace curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                          
                    </span>
                    <span
                      class="punctuation definition function end curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                    
                </span>
                <span
                  class="meta brace curly js"
                >
                  <span>
                    }
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="punctuation definition function end curly js"
                >
                  <span>
                    }
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
          </pre>,
          "type": "text",
          "value": "var robots = require('robots')  , parser = new robots.RobotsParser(                'http://nodeguide.ru/robots.txt',                'Mozilla/5.0 (compatible; RobotTxtBot/1.0)',                after_parse            );            function after_parse(parser, success) {  if(success) {    parser.canFetch('*', '/doc/dailyjs-nodepad/', function (access, url, reason) {      if (access) {        console.log(' url: '+url+', access: '+access);        // parse url ...      }    });  }};",
        },
        TextNode {
          "domNode": <p>
            Here's an example of getting list of sitemaps:
          </p>,
          "type": "text",
          "value": "Here's an example of getting list of sitemaps:",
        },
        TextNode {
          "domNode": <pre
            class="editor editor-colors"
          >
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="storage type js"
                >
                  <span>
                    var
                  </span>
                </span>
                <span>
                   robots 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta function-call js"
                >
                  <span
                    class="support function js"
                  >
                    <span>
                      require
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span>
                        robots
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                    
                </span>
                <span
                  class="meta delimiter object comma js"
                >
                  <span>
                    ,
                  </span>
                </span>
                <span>
                   parser 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta class instance constructor js"
                >
                  <span
                    class="keyword operator js"
                  >
                    <span>
                      new
                    </span>
                  </span>
                  <span>
                     
                  </span>
                  <span
                    class="entity name type instance js"
                  >
                    <span>
                      robots
                    </span>
                    <span
                      class="meta delimiter period js"
                    >
                      <span>
                        .
                      </span>
                    </span>
                    <span>
                      RobotsParser
                    </span>
                  </span>
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    (
                  </span>
                  <span>
                    )
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                   
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="variable other object js"
                >
                  <span>
                    parser
                  </span>
                </span>
                <span
                  class="meta js"
                >
                  <span
                    class="meta delimiter method period js"
                  >
                    <span>
                      .
                    </span>
                  </span>
                  <span
                    class="entity name function js"
                  >
                    <span>
                      setUrl
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span
                        class="markup underline link hyperlink"
                      >
                        <span>
                          http://nodeguide.ru/robots.txt
                        </span>
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="meta delimiter object comma js"
                    >
                      <span>
                        ,
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta function js"
                    >
                      <span
                        class="storage type function js"
                      >
                        <span>
                          function
                        </span>
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            parser
                          </span>
                        </span>
                        <span
                          class="meta delimiter object comma js"
                        >
                          <span>
                            ,
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            success
                          </span>
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="punctuation definition function begin curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                        
                    </span>
                    <span
                      class="keyword control js"
                    >
                      <span>
                        if
                      </span>
                    </span>
                    <span
                      class="meta brace round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span>
                      success
                    </span>
                    <span
                      class="meta brace round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta brace curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                          
                    </span>
                    <span
                      class="variable other object js"
                    >
                      <span>
                        parser
                      </span>
                    </span>
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta delimiter method period js"
                      >
                        <span>
                          .
                        </span>
                      </span>
                      <span
                        class="entity name function js"
                      >
                        <span>
                          getSitemaps
                        </span>
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="meta function js"
                        >
                          <span
                            class="storage type function js"
                          >
                            <span>
                              function
                            </span>
                          </span>
                          <span
                            class="meta js"
                          >
                            <span
                              class="punctuation definition begin round js"
                            >
                              <span>
                                (
                              </span>
                            </span>
                            <span
                              class="variable function js"
                            >
                              <span>
                                sitemaps
                              </span>
                            </span>
                            <span
                              class="punctuation definition end round js"
                            >
                              <span>
                                )
                              </span>
                            </span>
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="punctuation definition function begin curly js"
                        >
                          <span>
                            {
                          </span>
                        </span>
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta js"
                      >
                        <span>
                                
                        </span>
                        <span
                          class="comment line double-slash js"
                        >
                          <span
                            class="punctuation definition comment js"
                          >
                            <span>
                              //
                            </span>
                          </span>
                          <span>
                             sitemaps — array
                          </span>
                        </span>
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta js"
                      >
                        <span>
                              
                        </span>
                        <span
                          class="punctuation definition function end curly js"
                        >
                          <span>
                            }
                          </span>
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation terminator statement js"
                    >
                      <span>
                        ;
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                        
                    </span>
                    <span
                      class="meta brace curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition function end curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
          </pre>,
          "type": "text",
          "value": "var robots = require('robots')  , parser = new robots.RobotsParser(); parser.setUrl('http://nodeguide.ru/robots.txt', function(parser, success) {  if(success) {    parser.getSitemaps(function(sitemaps) {      // sitemaps — array    });  }});",
        },
        TextNode {
          "domNode": <p>
            Here's an example of getCrawlDelay usage:
          </p>,
          "type": "text",
          "value": "Here's an example of getCrawlDelay usage:",
        },
        TextNode {
          "domNode": <pre
            class="editor editor-colors"
          >
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="storage type js"
                >
                  <span>
                    var
                  </span>
                </span>
                <span>
                   robots 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta function-call js"
                >
                  <span
                    class="support function js"
                  >
                    <span>
                      require
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span>
                        robots
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                        
                </span>
                <span
                  class="meta delimiter object comma js"
                >
                  <span>
                    ,
                  </span>
                </span>
                <span>
                   parser 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta class instance constructor js"
                >
                  <span
                    class="keyword operator js"
                  >
                    <span>
                      new
                    </span>
                  </span>
                  <span>
                     
                  </span>
                  <span
                    class="entity name type instance js"
                  >
                    <span>
                      robots
                    </span>
                    <span
                      class="meta delimiter period js"
                    >
                      <span>
                        .
                      </span>
                    </span>
                    <span>
                      RobotsParser
                    </span>
                  </span>
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    (
                  </span>
                  <span>
                    )
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                   
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                  <span>
                     for example:
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                  <span>
                     $ curl -s 
                  </span>
                  <span
                    class="markup underline link hyperlink"
                  >
                    <span>
                      http://nodeguide.ru/robots.txt
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                  <span>
                     User-agent: Google-bot
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                  <span>
                     Disallow: / 
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                  <span>
                     Crawl-delay: 2
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                  <span>
                     User-agent: *
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                  <span>
                     Disallow: /
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                  <span>
                     Crawl-delay: 2
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                   
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="variable other object js"
                >
                  <span>
                    parser
                  </span>
                </span>
                <span
                  class="meta js"
                >
                  <span
                    class="meta delimiter method period js"
                  >
                    <span>
                      .
                    </span>
                  </span>
                  <span
                    class="entity name function js"
                  >
                    <span>
                      setUrl
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span
                        class="markup underline link hyperlink"
                      >
                        <span>
                          http://nodeguide.ru/robots.txt
                        </span>
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="meta delimiter object comma js"
                    >
                      <span>
                        ,
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta function js"
                    >
                      <span
                        class="storage type function js"
                      >
                        <span>
                          function
                        </span>
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            parser
                          </span>
                        </span>
                        <span
                          class="meta delimiter object comma js"
                        >
                          <span>
                            ,
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            success
                          </span>
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="punctuation definition function begin curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                            
                    </span>
                    <span
                      class="keyword control js"
                    >
                      <span>
                        if
                      </span>
                    </span>
                    <span
                      class="meta brace round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span>
                      success
                    </span>
                    <span
                      class="meta brace round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta brace curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                              
                    </span>
                    <span
                      class="storage type js"
                    >
                      <span>
                        var
                      </span>
                    </span>
                    <span>
                       GoogleBotDelay 
                    </span>
                    <span
                      class="keyword operator assignment js"
                    >
                      <span>
                        =
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="variable other object js"
                    >
                      <span>
                        parser
                      </span>
                    </span>
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta delimiter method period js"
                      >
                        <span>
                          .
                        </span>
                      </span>
                      <span
                        class="entity name function js"
                      >
                        <span>
                          getCrawlDelay
                        </span>
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="string quoted double js"
                        >
                          <span
                            class="punctuation definition string begin js"
                          >
                            <span>
                              "
                            </span>
                          </span>
                          <span>
                            Google-bot
                          </span>
                          <span
                            class="punctuation definition string end js"
                          >
                            <span>
                              "
                            </span>
                          </span>
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation terminator statement js"
                    >
                      <span>
                        ;
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                              
                    </span>
                    <span
                      class="comment line double-slash js"
                    >
                      <span
                        class="punctuation definition comment js"
                      >
                        <span>
                          //
                        </span>
                      </span>
                      <span>
                         ...
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                            
                    </span>
                    <span
                      class="meta brace curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                          
                    </span>
                    <span
                      class="punctuation definition function end curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
          </pre>,
          "type": "text",
          "value": "    var robots = require('robots')      , parser = new robots.RobotsParser();     // for example:    //    // $ curl -s http://nodeguide.ru/robots.txt    //    // User-agent: Google-bot    // Disallow: /     // Crawl-delay: 2    //    // User-agent: *    // Disallow: /    // Crawl-delay: 2     parser.setUrl('http://nodeguide.ru/robots.txt', function(parser, success) {      if(success) {        var GoogleBotDelay = parser.getCrawlDelay(\\"Google-bot\\");        // ...      }    });",
        },
        TextNode {
          "domNode": <p>
            An example of passing options to the HTTP request:
          </p>,
          "type": "text",
          "value": "An example of passing options to the HTTP request:",
        },
        TextNode {
          "domNode": <pre
            class="editor editor-colors"
          >
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="storage type js"
                >
                  <span>
                    var
                  </span>
                </span>
                <span>
                   options 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta brace curly js"
                >
                  <span>
                    {
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                    headers
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    :
                  </span>
                </span>
                <span
                  class="meta brace curly js"
                >
                  <span>
                    {
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      Authorization
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    :
                  </span>
                </span>
                <span
                  class="string quoted double js"
                >
                  <span
                    class="punctuation definition string begin js"
                  >
                    <span>
                      "
                    </span>
                  </span>
                  <span>
                    Basic 
                  </span>
                  <span
                    class="punctuation definition string end js"
                  >
                    <span>
                      "
                    </span>
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="keyword operator js"
                >
                  <span>
                    +
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta class instance constructor js"
                >
                  <span
                    class="keyword operator js"
                  >
                    <span>
                      new
                    </span>
                  </span>
                  <span>
                     
                  </span>
                  <span
                    class="entity name type instance js"
                  >
                    <span>
                      Buffer
                    </span>
                  </span>
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    (
                  </span>
                </span>
                <span
                  class="string quoted double js"
                >
                  <span
                    class="punctuation definition string begin js"
                  >
                    <span>
                      "
                    </span>
                  </span>
                  <span>
                    username:password
                  </span>
                  <span
                    class="punctuation definition string end js"
                  >
                    <span>
                      "
                    </span>
                  </span>
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    )
                  </span>
                </span>
                <span
                  class="meta js"
                >
                  <span
                    class="meta delimiter method period js"
                  >
                    <span>
                      .
                    </span>
                  </span>
                  <span
                    class="support function js"
                  >
                    <span>
                      toString
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted double js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          "
                        </span>
                      </span>
                      <span>
                        base64
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          "
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
                <span
                  class="meta brace curly js"
                >
                  <span>
                    }
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta brace curly js"
                >
                  <span>
                    }
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                   
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="storage type js"
                >
                  <span>
                    var
                  </span>
                </span>
                <span>
                   robots 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta function-call js"
                >
                  <span
                    class="support function js"
                  >
                    <span>
                      require
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span>
                        robots
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                    
                </span>
                <span
                  class="meta delimiter object comma js"
                >
                  <span>
                    ,
                  </span>
                </span>
                <span>
                   parser 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta class instance constructor js"
                >
                  <span
                    class="keyword operator js"
                  >
                    <span>
                      new
                    </span>
                  </span>
                  <span>
                     
                  </span>
                  <span
                    class="entity name type instance js"
                  >
                    <span>
                      robots
                    </span>
                    <span
                      class="meta delimiter period js"
                    >
                      <span>
                        .
                      </span>
                    </span>
                    <span>
                      RobotsParser
                    </span>
                  </span>
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    (
                  </span>
                </span>
                <span
                  class="constant language null js"
                >
                  <span>
                    null
                  </span>
                </span>
                <span
                  class="meta delimiter object comma js"
                >
                  <span>
                    ,
                  </span>
                </span>
                <span>
                   options
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    )
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                   
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="variable other object js"
                >
                  <span>
                    parser
                  </span>
                </span>
                <span
                  class="meta js"
                >
                  <span
                    class="meta delimiter method period js"
                  >
                    <span>
                      .
                    </span>
                  </span>
                  <span
                    class="entity name function js"
                  >
                    <span>
                      setUrl
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span
                        class="markup underline link hyperlink"
                      >
                        <span>
                          http://nodeguide.ru/robots.txt
                        </span>
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="meta delimiter object comma js"
                    >
                      <span>
                        ,
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta function js"
                    >
                      <span
                        class="storage type function js"
                      >
                        <span>
                          function
                        </span>
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            parser
                          </span>
                        </span>
                        <span
                          class="meta delimiter object comma js"
                        >
                          <span>
                            ,
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            success
                          </span>
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="punctuation definition function begin curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                        
                    </span>
                    <span
                      class="keyword operator js"
                    >
                      <span>
                        ...
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition function end curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
          </pre>,
          "type": "text",
          "value": "var options = {  headers:{    Authorization:\\"Basic \\" + new Buffer(\\"username:password\\").toString(\\"base64\\")}} var robots = require('robots')  , parser = new robots.RobotsParser(null, options); parser.setUrl('http://nodeguide.ru/robots.txt', function(parser, success) {  ...});",
        },
      ],
      "domNode": <h2>
        <a
          aria-hidden="true"
          class="deep-link"
          href="#usage"
          id="user-content-usage"
          rel="nofollow"
        >
          <svg
            aria-hidden="true"
            class="deep-link-icon"
            height="16"
            version="1.1"
            viewBox="0 0 16 16"
            width="16"
          >
            <path
              d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
            />
          </svg>
        </a>
        Usage
      </h2>,
      "level": 2,
      "type": "lvl",
      "value": "Usage",
    },
    LvlNode {
      "anchor": "user-content-api",
      "children": Array [
        TextNode {
          "domNode": <p>
            RobotsParser — main class. This class provides a set of methods to read,
    parse and answer questions about a single robots.txt file.
          </p>,
          "type": "text",
          "value": "RobotsParser — main class. This class provides a set of methods to read,
    parse and answer questions about a single robots.txt file.",
        },
        TextNode {
          "domNode": <li>
            <strong>
              setUrl(url, read)
            </strong>
             — sets the URL referring to a robots.txt file.
      by default, invokes read() method.
      If read is a function, it is called once the remote file is downloaded and parsed, and it
      takes in two arguments: the first is the parser itself, and the second is a boolean
      which is True if the the remote file was successfully parsed.
          </li>,
          "type": "text",
          "value": "setUrl(url, read) — sets the URL referring to a robots.txt file.
      by default, invokes read() method.
      If read is a function, it is called once the remote file is downloaded and parsed, and it
      takes in two arguments: the first is the parser itself, and the second is a boolean
      which is True if the the remote file was successfully parsed.",
        },
        TextNode {
          "domNode": <li>
            <strong>
              read(after_parse)
            </strong>
             — reads the robots.txt URL and feeds it to the parser
          </li>,
          "type": "text",
          "value": "read(after_parse) — reads the robots.txt URL and feeds it to the parser",
        },
        TextNode {
          "domNode": <li>
            <strong>
              parse(lines)
            </strong>
             — parse the input lines from a robots.txt file
          </li>,
          "type": "text",
          "value": "parse(lines) — parse the input lines from a robots.txt file",
        },
        TextNode {
          "domNode": <li>
            <strong>
              canFetch(userAgent, url, callback)
            </strong>
             — using the parsed robots.txt decide if
      userAgent can fetch url. Callback function:
      
            <code>
              function callback(access, url, reason) { ... }
            </code>
            
      where:
      
            <ul>
              
        
              <li>
                <em>
                  access
                </em>
                 — can this url be fetched. true/false.
              </li>
              
        
              <li>
                <em>
                  url
                </em>
                 — target url
              </li>
              
        
              <li>
                <em>
                  reason
                </em>
                 — reason for 
                <code>
                  access
                </code>
                . Object:
          
                <ul>
                  
            
                  <li>
                    type — valid values: 'statusCode', 'entry', 'defaultEntry', 'noRule'
                  </li>
                  
            
                  <li>
                    entry — an instance of 
                    <code>
                      lib/Entry.js:
                    </code>
                    . Only for types: 'entry', 'defaultEntry'
                  </li>
                  
            
                  <li>
                    statusCode — http response status code for url. Only for type 'statusCode'
                  </li>
                  
          
                </ul>
                
        
              </li>
              
      
            </ul>
            
    
          </li>,
          "type": "text",
          "value": "canFetch(userAgent, url, callback) — using the parsed robots.txt decide if
      userAgent can fetch url. Callback function:
      function callback(access, url, reason) { ... }
      where:
      
        access — can this url be fetched. true/false.
        url — target url
        reason — reason for access. Object:
          
            type — valid values: 'statusCode', 'entry', 'defaultEntry', 'noRule'
            entry — an instance of lib/Entry.js:. Only for types: 'entry', 'defaultEntry'
            statusCode — http response status code for url. Only for type 'statusCode'
          
        
      
    ",
        },
        TextNode {
          "domNode": <li>
            <strong>
              canFetchSync(userAgent, url)
            </strong>
             — using the parsed robots.txt decide if
      userAgent can fetch url. Return true/false.
          </li>,
          "type": "text",
          "value": "canFetchSync(userAgent, url) — using the parsed robots.txt decide if
      userAgent can fetch url. Return true/false.",
        },
        TextNode {
          "domNode": <li>
            <strong>
              getCrawlDelay(userAgent)
            </strong>
             — returns Crawl-delay for the certain userAgent
          </li>,
          "type": "text",
          "value": "getCrawlDelay(userAgent) — returns Crawl-delay for the certain userAgent",
        },
        TextNode {
          "domNode": <li>
            <strong>
              getSitemaps(sitemaps)
            </strong>
             — gets Sitemaps from parsed robots.txt
          </li>,
          "type": "text",
          "value": "getSitemaps(sitemaps) — gets Sitemaps from parsed robots.txt",
        },
        TextNode {
          "domNode": <li>
            <strong>
              getDisallowedPaths(userAgent)
            </strong>
             — gets paths explictly disallowed for the user agent specified AND *
          </li>,
          "type": "text",
          "value": "getDisallowedPaths(userAgent) — gets paths explictly disallowed for the user agent specified AND *",
        },
      ],
      "domNode": <h2>
        <a
          aria-hidden="true"
          class="deep-link"
          href="#api"
          id="user-content-api"
          rel="nofollow"
        >
          <svg
            aria-hidden="true"
            class="deep-link-icon"
            height="16"
            version="1.1"
            viewBox="0 0 16 16"
            width="16"
          >
            <path
              d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
            />
          </svg>
        </a>
        API
      </h2>,
      "level": 2,
      "type": "lvl",
      "value": "API",
    },
    LvlNode {
      "anchor": "user-content-license",
      "children": Array [
        TextNode {
          "domNode": <p>
            See 
            <a
              href="https://github.com/ekalinin/robots.js/blob/master/LICENSE"
              rel="nofollow"
            >
              LICENSE
            </a>
            
    file.
          </p>,
          "type": "text",
          "value": "See LICENSE
    file.",
        },
      ],
      "domNode": <h2>
        <a
          aria-hidden="true"
          class="deep-link"
          href="#license"
          id="user-content-license"
          rel="nofollow"
        >
          <svg
            aria-hidden="true"
            class="deep-link-icon"
            height="16"
            version="1.1"
            viewBox="0 0 16 16"
            width="16"
          >
            <path
              d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
            />
          </svg>
        </a>
        License
      </h2>,
      "level": 2,
      "type": "lvl",
      "value": "License",
    },
    LvlNode {
      "anchor": "user-content-resources",
      "children": Array [
        TextNode {
          "domNode": <li>
            <a
              href="http://code.google.com/web/controlcrawlindex/docs/robots_txt.html"
              rel="nofollow"
            >
              Robots.txt Specifications by Google
            </a>
          </li>,
          "type": "text",
          "value": "Robots.txt Specifications by Google",
        },
        TextNode {
          "domNode": <li>
            <a
              href="http://docs.python.org/library/robotparser.html"
              rel="nofollow"
            >
              Robots.txt parser for python
            </a>
          </li>,
          "type": "text",
          "value": "Robots.txt parser for python",
        },
        TextNode {
          "domNode": <li>
            <a
              href="http://www.robotstxt.org/orig.html"
              rel="nofollow"
            >
              A Standard for Robot Exclusion
            </a>
          </li>,
          "type": "text",
          "value": "A Standard for Robot Exclusion",
        },
      ],
      "domNode": <h1>
        <a
          aria-hidden="true"
          class="deep-link"
          href="#resources"
          id="user-content-resources"
          rel="nofollow"
        >
          <svg
            aria-hidden="true"
            class="deep-link-icon"
            height="16"
            version="1.1"
            viewBox="0 0 16 16"
            width="16"
          >
            <path
              d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
            />
          </svg>
        </a>
        Resources
      </h1>,
      "level": 1,
      "type": "lvl",
      "value": "Resources",
    },
  ],
  "global": Map {
    "lvl0" => "robots.js",
  },
  "type": "document",
  "value": null,
}
`;

exports[`parseElementTree spec edam 1`] = `
DocumentNode {
  "children": Array [
    TextNode {
      "domNode": <p
        data-reactid="72"
      >
        Template is the most significant concept. the processing is follows.
      </p>,
      "type": "text",
      "value": "Template is the most significant concept. the processing is follows.",
    },
    TextNode {
      "domNode": <li
        data-reactid="74"
      >
        <p
          data-reactid="75"
        >
          <!-- react-text: 76 -->
          Get user's answers by 
          <!-- /react-text -->
          <code
            data-reactid="77"
          >
            prompts
          </code>
          <!-- react-text: 78 -->
          .
          <!-- /react-text -->
        </p>
      </li>,
      "type": "text",
      "value": "Get user's answers by prompts.",
    },
    TextNode {
      "domNode": <li
        data-reactid="79"
      >
        <p
          data-reactid="80"
        >
          <!-- react-text: 81 -->
          Read 
          <!-- /react-text -->
          <code
            data-reactid="82"
          >
            root
          </code>
          <!-- react-text: 83 -->
           files, filter the files by 
          <!-- /react-text -->
          <code
            data-reactid="84"
          >
            ignore
          </code>
          <!-- react-text: 85 -->
          .
          <!-- /react-text -->
        </p>
      </li>,
      "type": "text",
      "value": "Read root files, filter the files by ignore.",
    },
    TextNode {
      "domNode": <li
        data-reactid="86"
      >
        <p
          data-reactid="87"
        >
          <!-- react-text: 88 -->
          Transform file content using 
          <!-- /react-text -->
          <a
            data-reactid="89"
            href="/edam/advanced/write-loader"
          >
            Loader
          </a>
        </p>
        <ul
          data-reactid="90"
        >
          <li
            data-reactid="91"
          >
            Rule one(top priority): matching the text from the file's first line.
          </li>
        </ul>
        <pre
          data-reactid="92"
        >
          <code
            class="hljs language-text"
            data-lang="text"
            data-query="{}"
            data-reactid="93"
          >
            <span
              class="xml"
              data-reactid="94"
            >
              // @loader $
            </span>
            <span
              class="hljs-template-variable"
              data-reactid="95"
            >
              {LOADER_NAME}
            </span>
            <span
              class="xml"
              data-reactid="96"
            >
              ?$
            </span>
            <span
              class="hljs-template-variable"
              data-reactid="97"
            >
              {QUERY}
            </span>
            <span
              class="xml"
              data-reactid="98"
            >
              
/* @loader $
            </span>
            <span
              class="hljs-template-variable"
              data-reactid="99"
            >
              {LOADER_NAME}
            </span>
            <span
              class="xml"
              data-reactid="100"
            >
              ?$
            </span>
            <span
              class="hljs-template-variable"
              data-reactid="101"
            >
              {QUERY}
            </span>
            <span
              class="xml"
              data-reactid="102"
            >
               */
# @loader $
            </span>
            <span
              class="hljs-template-variable"
              data-reactid="103"
            >
              {LOADER_NAME}
            </span>
            <span
              class="xml"
              data-reactid="104"
            >
              ?$
            </span>
            <span
              class="hljs-template-variable"
              data-reactid="105"
            >
              {QUERY}
            </span>
            <span
              class="xml"
              data-reactid="106"
            >
              <!-- react-text: 107 -->
              
    
              <!-- /react-text -->
              <span
                class="hljs-comment"
                data-reactid="108"
              >
                &lt;!-- @loader $
              </span>
            </span>
            <span
              class="hljs-template-variable"
              data-reactid="109"
            >
              {LOADER_NAME}
            </span>
            <span
              class="xml"
              data-reactid="110"
            >
              ?$
            </span>
            <span
              class="hljs-template-variable"
              data-reactid="111"
            >
              {QUERY}
            </span>
            <span
              class="xml"
              data-reactid="112"
            >
               --&gt;
            </span>
          </code>
        </pre>
        <ul
          data-reactid="113"
        >
          <li
            data-reactid="114"
          >
            <!-- react-text: 115 -->
            Rule two(normal priority): matching loader from the 
            <!-- /react-text -->
            <code
              data-reactid="116"
            >
              test
            </code>
            <!-- react-text: 117 -->
             field of 
            <!-- /react-text -->
            <code
              data-reactid="118"
            >
              mappers
            </code>
            <!-- react-text: 119 -->
            .
            <!-- /react-text -->
          </li>
        </ul>
      </li>,
      "type": "text",
      "value": "Transform file content using LoaderRule one(top priority): matching the text from the file's first line.// @loader \${LOADER_NAME}?\${QUERY}
/* @loader \${LOADER_NAME}?\${QUERY} */
# @loader \${LOADER_NAME}?\${QUERY}
    <!-- @loader \${LOADER_NAME}?\${QUERY} -->Rule two(normal priority): matching loader from the test field of mappers.",
    },
    TextNode {
      "domNode": <li
        data-reactid="120"
      >
        <p
          data-reactid="121"
        >
          <!-- react-text: 122 -->
          Adjust files struction by 
          <!-- /react-text -->
          <code
            data-reactid="123"
          >
            copy
          </code>
          <!-- react-text: 124 -->
           and 
          <!-- /react-text -->
          <code
            data-reactid="125"
          >
            move
          </code>
          <!-- react-text: 126 -->
          .
          <!-- /react-text -->
        </p>
      </li>,
      "type": "text",
      "value": "Adjust files struction by copy and move.",
    },
    TextNode {
      "domNode": <li
        data-reactid="127"
      >
        <p
          data-reactid="128"
        >
          <!-- react-text: 129 -->
          Trigger 
          <!-- /react-text -->
          <code
            data-reactid="130"
          >
            usefulHook
          </code>
          <!-- react-text: 131 -->
           then 
          <!-- /react-text -->
          <code
            data-reactid="132"
          >
            post
          </code>
          <!-- react-text: 133 -->
           hooks
          <!-- /react-text -->
        </p>
      </li>,
      "type": "text",
      "value": "Trigger usefulHook then post hooks",
    },
    TextNode {
      "domNode": <p
        data-reactid="134"
      >
        <strong
          data-reactid="135"
        >
          <!-- react-text: 136 -->
          Note：The order of fields in 
          <!-- /react-text -->
          <code
            data-reactid="137"
          >
            package.json
          </code>
          <!-- react-text: 138 -->
           is that 
          <!-- /react-text -->
          <code
            data-reactid="139"
          >
            edam:main
          </code>
          <!-- react-text: 140 -->
           is superior to 
          <!-- /react-text -->
          <code
            data-reactid="141"
          >
            main
          </code>
          <!-- react-text: 142 -->
          . (&gt;=3.1)
          <!-- /react-text -->
        </strong>
      </p>,
      "type": "text",
      "value": "Note：The order of fields in package.json is that edam:main is superior to main. (>=3.1)",
    },
    LvlNode {
      "anchor": null,
      "children": Array [
        TextNode {
          "domNode": <p
            data-reactid="149"
          >
            Allows exporting config object directly, or callable.
          </p>,
          "type": "text",
          "value": "Allows exporting config object directly, or callable.",
        },
        TextNode {
          "domNode": <p
            data-reactid="150"
          >
            <code
              data-reactid="151"
            >
              module.exports = { /*config*/ }
            </code>
            <!-- react-text: 152 -->
             
            <!-- /react-text -->
            <code
              data-reactid="153"
            >
              module.exports = edam =&gt; ({ /*config*/ })
            </code>
          </p>,
          "type": "text",
          "value": "module.exports = { /*config*/ } module.exports = edam => ({ /*config*/ })",
        },
        LvlNode {
          "anchor": null,
          "children": Array [
            TextNode {
              "domNode": <p
                data-reactid="160"
              >
                <code
                  data-reactid="161"
                >
                  edam &gt;= 2.0.1
                </code>
                <!-- react-text: 162 -->
                 Returns the object which excludes 
                <!-- /react-text -->
                <code
                  data-reactid="163"
                >
                  prompts
                </code>
                <!-- react-text: 164 -->
                .
                <!-- /react-text -->
              </p>,
              "type": "text",
              "value": "edam >= 2.0.1 Returns the object which excludes prompts.",
            },
            TextNode {
              "domNode": <li
                data-reactid="166"
              >
                <!-- react-text: 167 -->
                type: 
                <!-- /react-text -->
                <code
                  data-reactid="168"
                >
                  function
                </code>
              </li>,
              "type": "text",
              "value": "type: function",
            },
            TextNode {
              "domNode": <p
                data-reactid="169"
              >
                Eg：
              </p>,
              "type": "text",
              "value": "Eg：",
            },
          ],
          "domNode": <h3
            data-reactid="154"
          >
            <a
              aria-hidden="true"
              class="anchor"
              data-reactid="155"
              name="process"
            />
            <a
              aria-hidden="true"
              class="hash-link"
              data-reactid="156"
              href="#process"
            >
              <svg
                aria-hidden="true"
                data-reactid="157"
                height="16"
                version="1.1"
                viewBox="0 0 16 16"
                width="16"
              >
                <path
                  d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
                  data-reactid="158"
                  fill-rule="evenodd"
                />
              </svg>
            </a>
            <!-- react-text: 159 -->
            process
            <!-- /react-text -->
          </h3>,
          "level": 4,
          "type": "lvl",
          "value": "process",
        },
        LvlNode {
          "anchor": null,
          "children": Array [
            TextNode {
              "domNode": <p
                data-reactid="187"
              >
                User's interaction definition.
              </p>,
              "type": "text",
              "value": "User's interaction definition.",
            },
            TextNode {
              "domNode": <li
                data-reactid="189"
              >
                <p
                  data-reactid="190"
                >
                  <!-- react-text: 191 -->
                  type: 
                  <!-- /react-text -->
                  <code
                    data-reactid="192"
                  >
                    []
                  </code>
                </p>
                <p
                  data-reactid="193"
                >
                  <!-- react-text: 194 -->
                  references to 
                  <!-- /react-text -->
                  <a
                    data-reactid="195"
                    href="https://github.com/SBoudrias/Inquirer.js/"
                  >
                    inquirer.js
                  </a>
                </p>
              </li>,
              "type": "text",
              "value": "type: []references to inquirer.js",
            },
          ],
          "domNode": <h3
            data-reactid="181"
          >
            <a
              aria-hidden="true"
              class="anchor"
              data-reactid="182"
              name="prompts"
            />
            <a
              aria-hidden="true"
              class="hash-link"
              data-reactid="183"
              href="#prompts"
            >
              <svg
                aria-hidden="true"
                data-reactid="184"
                height="16"
                version="1.1"
                viewBox="0 0 16 16"
                width="16"
              >
                <path
                  d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
                  data-reactid="185"
                  fill-rule="evenodd"
                />
              </svg>
            </a>
            <!-- react-text: 186 -->
            prompts
            <!-- /react-text -->
          </h3>,
          "level": 4,
          "type": "lvl",
          "value": "prompts",
        },
        LvlNode {
          "anchor": null,
          "children": Array [
            TextNode {
              "domNode": <p
                data-reactid="202"
              >
                Template files' root.
              </p>,
              "type": "text",
              "value": "Template files' root.",
            },
            TextNode {
              "domNode": <li
                data-reactid="204"
              >
                <!-- react-text: 205 -->
                type: 
                <!-- /react-text -->
                <code
                  data-reactid="206"
                >
                  string
                </code>
              </li>,
              "type": "text",
              "value": "type: string",
            },
            TextNode {
              "domNode": <li
                data-reactid="207"
              >
                <!-- react-text: 208 -->
                default: 
                <!-- /react-text -->
                <code
                  data-reactid="209"
                >
                  ./template
                </code>
              </li>,
              "type": "text",
              "value": "default: ./template",
            },
          ],
          "domNode": <h3
            data-reactid="196"
          >
            <a
              aria-hidden="true"
              class="anchor"
              data-reactid="197"
              name="root"
            />
            <a
              aria-hidden="true"
              class="hash-link"
              data-reactid="198"
              href="#root"
            >
              <svg
                aria-hidden="true"
                data-reactid="199"
                height="16"
                version="1.1"
                viewBox="0 0 16 16"
                width="16"
              >
                <path
                  d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
                  data-reactid="200"
                  fill-rule="evenodd"
                />
              </svg>
            </a>
            <!-- react-text: 201 -->
            root
            <!-- /react-text -->
          </h3>,
          "level": 4,
          "type": "lvl",
          "value": "root",
        },
        LvlNode {
          "anchor": null,
          "children": Array [
            TextNode {
              "domNode": <p
                data-reactid="216"
              >
                Files' filter
              </p>,
              "type": "text",
              "value": "Files' filter",
            },
            TextNode {
              "domNode": <li
                data-reactid="218"
              >
                <p
                  data-reactid="219"
                >
                  <!-- react-text: 220 -->
                  type: 
                  <!-- /react-text -->
                  <code
                    data-reactid="221"
                  >
                    string[]
                  </code>
                </p>
                <p
                  data-reactid="222"
                >
                  <!-- react-text: 223 -->
                  Or 
                  <!-- /react-text -->
                  <code
                    data-reactid="224"
                  >
                    answers =&gt; []
                  </code>
                </p>
              </li>,
              "type": "text",
              "value": "type: string[]Or answers => [",
            },
          ],
          "domNode": <h3
            data-reactid="210"
          >
            <a
              aria-hidden="true"
              class="anchor"
              data-reactid="211"
              name="ignore"
            />
            <a
              aria-hidden="true"
              class="hash-link"
              data-reactid="212"
              href="#ignore"
            >
              <svg
                aria-hidden="true"
                data-reactid="213"
                height="16"
                version="1.1"
                viewBox="0 0 16 16"
                width="16"
              >
                <path
                  d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
                  data-reactid="214"
                  fill-rule="evenodd"
                />
              </svg>
            </a>
            <!-- react-text: 215 -->
            ignore
            <!-- /react-text -->
          </h3>,
          "level": 4,
          "type": "lvl",
          "value": "ignore",
        },
        LvlNode {
          "anchor": null,
          "children": Array [
            TextNode {
              "domNode": <li
                data-reactid="232"
              >
                <p
                  data-reactid="233"
                >
                  <!-- react-text: 234 -->
                  type 
                  <!-- /react-text -->
                  <code
                    data-reactid="235"
                  >
                    {}
                  </code>
                </p>
              </li>,
              "type": "text",
              "value": "type {}",
            },
            TextNode {
              "domNode": <li
                data-reactid="236"
              >
                <p
                  data-reactid="237"
                >
                  example
                </p>
                <pre
                  data-reactid="238"
                >
                  <code
                    class="hljs language-javascript"
                    data-lang="javascript"
                    data-query="{}"
                    data-reactid="239"
                  >
                    <!-- react-text: 240 -->
                    {
    
                    <!-- /react-text -->
                    <span
                      class="hljs-attr"
                      data-reactid="241"
                    >
                      date
                    </span>
                    <!-- react-text: 242 -->
                    : 
                    <!-- /react-text -->
                    <span
                      class="hljs-keyword"
                      data-reactid="243"
                    >
                      new
                    </span>
                    <!-- react-text: 244 -->
                     
                    <!-- /react-text -->
                    <span
                      class="hljs-built_in"
                      data-reactid="245"
                    >
                      Date
                    </span>
                    <!-- react-text: 246 -->
                    (),
    
                    <!-- /react-text -->
                    <span
                      class="hljs-attr"
                      data-reactid="247"
                    >
                      val
                    </span>
                    <!-- react-text: 248 -->
                    : 
                    <!-- /react-text -->
                    <span
                      class="hljs-string"
                      data-reactid="249"
                    >
                      'abc'
                    </span>
                    <!-- react-text: 250 -->
                    
}
    
                    <!-- /react-text -->
                    <span
                      class="hljs-comment"
                      data-reactid="251"
                    >
                      // or
                    </span>
                    <!-- react-text: 252 -->
                    
(answers) =&gt; ({})
                    <!-- /react-text -->
                  </code>
                </pre>
              </li>,
              "type": "text",
              "value": "example{
    date: new Date(),
    val: 'abc'
}
    // or
(answers) => ({})",
            },
          ],
          "domNode": <h3
            data-reactid="225"
          >
            <a
              aria-hidden="true"
              class="anchor"
              data-reactid="226"
              name="variables"
            />
            <a
              aria-hidden="true"
              class="hash-link"
              data-reactid="227"
              href="#variables"
            >
              <svg
                aria-hidden="true"
                data-reactid="228"
                height="16"
                version="1.1"
                viewBox="0 0 16 16"
                width="16"
              >
                <path
                  d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
                  data-reactid="229"
                  fill-rule="evenodd"
                />
              </svg>
            </a>
            <!-- react-text: 230 -->
            variables
            <!-- /react-text -->
          </h3>,
          "level": 4,
          "type": "lvl",
          "value": "variables",
        },
        LvlNode {
          "anchor": null,
          "children": Array [],
          "domNode": <h3
            data-reactid="253"
          >
            <a
              aria-hidden="true"
              class="anchor"
              data-reactid="254"
              name="hooks"
            />
            <a
              aria-hidden="true"
              class="hash-link"
              data-reactid="255"
              href="#hooks"
            >
              <svg
                aria-hidden="true"
                data-reactid="256"
                height="16"
                version="1.1"
                viewBox="0 0 16 16"
                width="16"
              >
                <path
                  d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
                  data-reactid="257"
                  fill-rule="evenodd"
                />
              </svg>
            </a>
            <!-- react-text: 258 -->
            hooks
            <!-- /react-text -->
          </h3>,
          "level": 4,
          "type": "lvl",
          "value": "hooks",
        },
        LvlNode {
          "anchor": null,
          "children": Array [
            TextNode {
              "domNode": <p
                data-reactid="278"
              >
                <!-- react-text: 279 -->
                Check out 
                <!-- /react-text -->
                <a
                  data-reactid="280"
                  href="/edam/advanced/write-loader"
                >
                  Write a loader
                </a>
              </p>,
              "type": "text",
              "value": "Check out Write a loader",
            },
          ],
          "domNode": <h3
            data-reactid="272"
          >
            <a
              aria-hidden="true"
              class="anchor"
              data-reactid="273"
              name="loaders-和-mappers"
            />
            <a
              aria-hidden="true"
              class="hash-link"
              data-reactid="274"
              href="#loaders-%E5%92%8C-mappers"
            >
              <svg
                aria-hidden="true"
                data-reactid="275"
                height="16"
                version="1.1"
                viewBox="0 0 16 16"
                width="16"
              >
                <path
                  d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
                  data-reactid="276"
                  fill-rule="evenodd"
                />
              </svg>
            </a>
            <!-- react-text: 277 -->
            loaders 和 mappers
            <!-- /react-text -->
          </h3>,
          "level": 4,
          "type": "lvl",
          "value": "loaders 和 mappers",
        },
        LvlNode {
          "anchor": null,
          "children": Array [
            TextNode {
              "domNode": <p
                data-reactid="314"
              >
                <!-- react-text: 315 -->
                or 
                <!-- /react-text -->
                <code
                  data-reactid="316"
                >
                  (answers) =&gt; ({})
                </code>
              </p>,
              "type": "text",
              "value": "or (answers) => ({})",
            },
          ],
          "domNode": <h3
            data-reactid="281"
          >
            <a
              aria-hidden="true"
              class="anchor"
              data-reactid="282"
              name="move"
            />
            <a
              aria-hidden="true"
              class="hash-link"
              data-reactid="283"
              href="#move"
            >
              <svg
                aria-hidden="true"
                data-reactid="284"
                height="16"
                version="1.1"
                viewBox="0 0 16 16"
                width="16"
              >
                <path
                  d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
                  data-reactid="285"
                  fill-rule="evenodd"
                />
              </svg>
            </a>
            <!-- react-text: 286 -->
            move
            <!-- /react-text -->
          </h3>,
          "level": 4,
          "type": "lvl",
          "value": "move",
        },
        LvlNode {
          "anchor": null,
          "children": Array [
            TextNode {
              "domNode": <p
                data-reactid="323"
              >
                <!-- react-text: 324 -->
                like 
                <!-- /react-text -->
                <code
                  data-reactid="325"
                >
                  move
                </code>
              </p>,
              "type": "text",
              "value": "like move",
            },
          ],
          "domNode": <h3
            data-reactid="317"
          >
            <a
              aria-hidden="true"
              class="anchor"
              data-reactid="318"
              name="copy"
            />
            <a
              aria-hidden="true"
              class="hash-link"
              data-reactid="319"
              href="#copy"
            >
              <svg
                aria-hidden="true"
                data-reactid="320"
                height="16"
                version="1.1"
                viewBox="0 0 16 16"
                width="16"
              >
                <path
                  d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
                  data-reactid="321"
                  fill-rule="evenodd"
                />
              </svg>
            </a>
            <!-- react-text: 322 -->
            copy
            <!-- /react-text -->
          </h3>,
          "level": 4,
          "type": "lvl",
          "value": "copy",
        },
        LvlNode {
          "anchor": null,
          "children": Array [
            TextNode {
              "domNode": <p
                data-reactid="332"
              >
                <!-- react-text: 333 -->
                Some useful shortcuts of 
                <!-- /react-text -->
                <code
                  data-reactid="334"
                >
                  post
                </code>
                <!-- react-text: 335 -->
                 hook.
                <!-- /react-text -->
              </p>,
              "type": "text",
              "value": "Some useful shortcuts of post hook.",
            },
            TextNode {
              "domNode": <li
                data-reactid="337"
              >
                <p
                  data-reactid="338"
                >
                  gitInit
                </p>
                <p
                  data-reactid="339"
                >
                  <code
                    data-reactid="340"
                  >
                    git init
                  </code>
                </p>
                <ul
                  data-reactid="341"
                >
                  <li
                    data-reactid="342"
                  >
                    <!-- react-text: 343 -->
                    type: 
                    <!-- /react-text -->
                    <code
                      data-reactid="344"
                    >
                      boolean
                    </code>
                  </li>
                  <li
                    data-reactid="345"
                  >
                    <!-- react-text: 346 -->
                    default: 
                    <!-- /react-text -->
                    <code
                      data-reactid="347"
                    >
                      false
                    </code>
                  </li>
                </ul>
              </li>,
              "type": "text",
              "value": "gitInitgit inittype: booleandefault: false",
            },
            TextNode {
              "domNode": <li
                data-reactid="348"
              >
                <p
                  data-reactid="349"
                >
                  installDependencies
                </p>
                <p
                  data-reactid="350"
                >
                  <!-- react-text: 351 -->
                  install dependencies of 
                  <!-- /react-text -->
                  <code
                    data-reactid="352"
                  >
                    package.json
                  </code>
                </p>
                <ul
                  data-reactid="353"
                >
                  <li
                    data-reactid="354"
                  >
                    <!-- react-text: 355 -->
                    type: 
                    <!-- /react-text -->
                    <code
                      data-reactid="356"
                    >
                      boolean
                    </code>
                  </li>
                  <li
                    data-reactid="357"
                  >
                    <!-- react-text: 358 -->
                    default: 
                    <!-- /react-text -->
                    <code
                      data-reactid="359"
                    >
                      false
                    </code>
                  </li>
                </ul>
              </li>,
              "type": "text",
              "value": "installDependenciesinstall dependencies of package.jsontype: booleandefault: false",
            },
            TextNode {
              "domNode": <li
                data-reactid="360"
              >
                <p
                  data-reactid="361"
                >
                  installDevDependencies
                </p>
                <p
                  data-reactid="362"
                >
                  <!-- react-text: 363 -->
                  install devDependencies of 
                  <!-- /react-text -->
                  <code
                    data-reactid="364"
                  >
                    package.json
                  </code>
                </p>
                <ul
                  data-reactid="365"
                >
                  <li
                    data-reactid="366"
                  >
                    <!-- react-text: 367 -->
                    type: 
                    <!-- /react-text -->
                    <code
                      data-reactid="368"
                    >
                      boolean
                    </code>
                  </li>
                  <li
                    data-reactid="369"
                  >
                    <!-- react-text: 370 -->
                    default: 
                    <!-- /react-text -->
                    <code
                      data-reactid="371"
                    >
                      false
                    </code>
                  </li>
                </ul>
              </li>,
              "type": "text",
              "value": "installDevDependenciesinstall devDependencies of package.jsontype: booleandefault: false",
            },
            TextNode {
              "domNode": <p
                data-reactid="372"
              >
                <!-- react-text: 373 -->
                或者 
                <!-- /react-text -->
                <code
                  data-reactid="374"
                >
                  (answers) =&gt; ({})
                </code>
              </p>,
              "type": "text",
              "value": "或者 (answers) => ({})",
            },
          ],
          "domNode": <h3
            data-reactid="326"
          >
            <a
              aria-hidden="true"
              class="anchor"
              data-reactid="327"
              name="usefulhook"
            />
            <a
              aria-hidden="true"
              class="hash-link"
              data-reactid="328"
              href="#usefulhook"
            >
              <svg
                aria-hidden="true"
                data-reactid="329"
                height="16"
                version="1.1"
                viewBox="0 0 16 16"
                width="16"
              >
                <path
                  d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
                  data-reactid="330"
                  fill-rule="evenodd"
                />
              </svg>
            </a>
            <!-- react-text: 331 -->
            usefulHook
            <!-- /react-text -->
          </h3>,
          "level": 4,
          "type": "lvl",
          "value": "usefulHook",
        },
      ],
      "domNode": <h2
        data-reactid="143"
      >
        <a
          aria-hidden="true"
          class="anchor"
          data-reactid="144"
          name="config"
        />
        <a
          aria-hidden="true"
          class="hash-link"
          data-reactid="145"
          href="#config"
        >
          <svg
            aria-hidden="true"
            data-reactid="146"
            height="16"
            version="1.1"
            viewBox="0 0 16 16"
            width="16"
          >
            <path
              d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
              data-reactid="147"
              fill-rule="evenodd"
            />
          </svg>
        </a>
        <!-- react-text: 148 -->
        Config
        <!-- /react-text -->
      </h2>,
      "level": 3,
      "type": "lvl",
      "value": "Config",
    },
  ],
  "global": Map {
    "lvl0" => "Advanced",
    "lvl1" => "Write a template",
  },
  "type": "document",
  "value": null,
}
`;

exports[`parseElementTree spec wiki 1`] = `
DocumentNode {
  "children": Array [
    LvlNode {
      "anchor": "BEFE新手指南-VisualizedIntroduction-BEFE团队介绍：",
      "children": Array [],
      "domNode": <h1
        id="BEFE新手指南-VisualizedIntroduction-BEFE团队介绍："
      >
        <strong>
          BEFE团队介绍：
        </strong>
      </h1>,
      "level": 1,
      "type": "lvl",
      "value": "BEFE团队介绍：",
    },
    TextNode {
      "domNode": <li>
        EUX与BPIT的关系：为BPIT的UI（用户界面）, FE（前端应用）和UE（用户体验）需求提供资源池。
        <br />
        <span
          class="confluence-embedded-file-wrapper confluence-embedded-manual-size"
        >
          <img
            class="confluence-embedded-image"
            data-base-url="http://wiki.baidu.com"
            data-image-src="/download/attachments/195861516/EUX%3ABPIT.jpg?version=3&modificationDate=1468419010000&api=v2"
            data-linked-resource-container-id="195861516"
            data-linked-resource-container-version="14"
            data-linked-resource-content-type="image/jpeg"
            data-linked-resource-default-alias="EUX:BPIT.jpg"
            data-linked-resource-id="196805847"
            data-linked-resource-type="attachment"
            data-linked-resource-version="3"
            data-unresolved-comment-count="0"
            src="/download/attachments/195861516/EUX%3ABPIT.jpg?version=3&modificationDate=1468419010000&api=v2"
            width="900"
          />
        </span>
      </li>,
      "type": "text",
      "value": "EUX与BPIT的关系：为BPIT的UI（用户界面）, FE（前端应用）和UE（用户体验）需求提供资源池。",
    },
    TextNode {
      "domNode": <li>
        EUX团队内部目前正在开发的项目以及团队交互关系。
      </li>,
      "type": "text",
      "value": "EUX团队内部目前正在开发的项目以及团队交互关系。",
    },
    TextNode {
      "domNode": <li>
        角色术语介绍
        <ol>
          <li>
            PM: 项目经理 - 分析用户需求，并设计出对应的产品（RD有时也会参与PM的项目设计，担当技术顾问）。
          </li>
          <li>
            UE: 用户体验 - 对产品提供流程及逻辑可行性方面的分析，并提供交互稿。
          </li>
          <li>
            UI: 用户界面 - 对产品的用户界面进行设计，并提供美观、人性化、和新颖的UI稿。
          </li>
          <li>
            FE: 前端开发 - 产生html(css/less),JS等实际代码来实现UE/UI设计的界面及用户体验。
          </li>
          <li>
            RD: 后端研发 - 产生后端实际代码来实现PM/UE设计的用户需求和用户体验。
          </li>
          <li>
            QA：质量保证 - 对FE/RD团队完成的代码进行测试，代码必须依次通过测试环境和预上线环境才能上线。
          </li>
        </ol>
      </li>,
      "type": "text",
      "value": "角色术语介绍PM: 项目经理 - 分析用户需求，并设计出对应的产品（RD有时也会参与PM的项目设计，担当技术顾问）。UE: 用户体验 - 对产品提供流程及逻辑可行性方面的分析，并提供交互稿。UI: 用户界面 - 对产品的用户界面进行设计，并提供美观、人性化、和新颖的UI稿。FE: 前端开发 - 产生html(css/less),JS等实际代码来实现UE/UI设计的界面及用户体验。RD: 后端研发 - 产生后端实际代码来实现PM/UE设计的用户需求和用户体验。QA：质量保证 - 对FE/RD团队完成的代码进行测试，代码必须依次通过测试环境和预上线环境才能上线。",
    },
    LvlNode {
      "anchor": "BEFE新手指南-VisualizedIntroduction-BaiduBEFE入职必备：",
      "children": Array [
        TextNode {
          "domNode": <li
            class="li1"
          >
            <strong>
              基础信息设置：
            </strong>
            <ol>
              <li
                class="li1"
              >
                <span
                  class="s1"
                >
                  <a
                    class="external-link"
                    href="http://erp.baidu.com/"
                    rel="nofollow"
                  >
                    erp.baidu.com/
                  </a>
                </span>
              </li>
              <li
                class="li1"
              >
                <span
                  class="s1"
                >
                  <a
                    class="external-link"
                    href="http://family.baidu.com/"
                    rel="nofollow"
                  >
                    family.baidu.com/
                  </a>
                </span>
                <span
                  class="s3"
                >
                   
                </span>
              </li>
            </ol>
          </li>,
          "type": "text",
          "value": "基础信息设置：erp.baidu.com/family.baidu.com/ ",
        },
        TextNode {
          "domNode": <li>
            <span
              class="s1"
            >
              <strong>
                度生活以及饭卡充值：
              </strong>
            </span>
            <ol>
              <li
                class="li1"
              >
                <span
                  class="s1"
                >
                   
                </span>
                <span
                  class="s2"
                >
                  扫二维码以下载移动端app：
                  <a
                    class="external-link"
                    href="http://life.family.baidu.com/core/index.jsp?chc=324281933"
                    rel="nofollow"
                  >
                    <span
                      class="s3"
                    >
                      http://life.family.baidu.com/core/index.jsp?chc=324281933
                    </span>
                  </a>
                </span>
              </li>
              <li
                class="li1"
              >
                <span
                  class="s1"
                >
                   
                </span>
                <span
                  class="s2"
                >
                  进入“度生活”选“充饭卡”
                </span>
                <span
                  class="s1"
                >
                  <strong>
                    <br />
                  </strong>
                </span>
              </li>
            </ol>
          </li>,
          "type": "text",
          "value": "度生活以及饭卡充值： 扫二维码以下载移动端app：http://life.family.baidu.com/core/index.jsp?chc=324281933 进入“度生活”选“充饭卡”",
        },
        TextNode {
          "domNode": <li
            class="li1"
          >
            <strong>
              <span
                class="s1"
              >
                 
              </span>
            </strong>
            <span
              class="s2"
            >
              <strong>
                git设置
              </strong>
              ：
            </span>
            <ol>
              <li
                class="li1"
              >
                <span
                  class="s1"
                >
                   
                </span>
                <span
                  class="s2"
                >
                  通过
                  <a
                    class="external-link"
                    href="http://gitlab.baidu.com/"
                    rel="nofollow"
                  >
                    <span
                      class="s3"
                    >
                      http://gitlab.baidu.com/
                    </span>
                  </a>
                   加入团队git
                </span>
              </li>
              <li
                class="li1"
              >
                <span
                  class="s1"
                  style="line-height: 1.42857;"
                >
                   
                </span>
                <span
                  class="s2"
                  style="line-height: 1.42857;"
                >
                  git版本管理可视化-Sourcetree: 
                  <span
                    class="s3"
                  >
                    <a
                      class="external-link"
                      href="https://www.sourcetreeapp.com/"
                      rel="nofollow"
                    >
                      https://www.sourcetreeapp.com/
                    </a>
                  </span>
                </span>
              </li>
              <li
                class="li1"
              >
                <span
                  class="s1"
                >
                   
                </span>
                <span
                  class="s2"
                >
                  spotlight搜索加强-Alfred：
                  <a
                    class="external-link"
                    href="https://www.alfredapp.com/"
                    rel="nofollow"
                  >
                    https://www.alfredapp.com/
                  </a>
                </span>
                <span
                  class="s2"
                  style="line-height: 1.42857;"
                >
                  <br />
                </span>
              </li>
            </ol>
          </li>,
          "type": "text",
          "value": " git设置： 通过http://gitlab.baidu.com/ 加入团队git git版本管理可视化-Sourcetree: https://www.sourcetreeapp.com/ spotlight搜索加强-Alfred：https://www.alfredapp.com/",
        },
        TextNode {
          "domNode": <li
            class="li1"
          >
            <span
              class="s1"
            >
               
            </span>
            <strong>
              <span
                class="s2"
              >
                BEFE视频教程：
              </span>
            </strong>
            <ol>
              <li
                class="li1"
              >
                <p
                  class="p1"
                >
                  <a
                    class="external-link"
                    href="http://athena.eux.baidu.com/befe-video"
                    rel="nofollow"
                  >
                    http://athena.eux.baidu.com/befe-video
                  </a>
                </p>
              </li>
            </ol>
          </li>,
          "type": "text",
          "value": " BEFE视频教程：http://athena.eux.baidu.com/befe-video",
        },
        TextNode {
          "domNode": <li
            class="li1"
          >
            <strong>
              <span
                class="s1"
              >
                 
                <strong>
                  <span
                    class="s2"
                  >
                    BEFE代码规范：
                  </span>
                </strong>
              </span>
            </strong>
            <span
              class="s1"
            >
              <strong>
                <br />
              </strong>
            </span>
            <ol>
              <li
                class="li1"
              >
                <span
                  class="s1"
                >
                  <a
                    class="external-link"
                    href="http://styleguide.baidu.com/"
                    rel="nofollow"
                  >
                    http://styleguide.baidu.com/
                  </a>
                </span>
              </li>
              <li
                class="li1"
              >
                <span
                  class="s1"
                >
                  <a
                    class="external-link"
                    href="http://agroup.baidu.com/fe-styleguide/md/article/62439"
                    rel="nofollow"
                  >
                    http://agroup.baidu.com/fe-styleguide/md/article/62439
                  </a>
                </span>
              </li>
              <li
                class="li1"
              >
                <span
                  class="s1"
                >
                  <a
                    class="external-link"
                    href="http://agroup.baidu.com/fe-styleguide/md/article/62453"
                    rel="nofollow"
                  >
                    http://agroup.baidu.com/fe-styleguide/md/article/62453
                  </a>
                </span>
              </li>
            </ol>
          </li>,
          "type": "text",
          "value": " BEFE代码规范：http://styleguide.baidu.com/http://agroup.baidu.com/fe-styleguide/md/article/62439http://agroup.baidu.com/fe-styleguide/md/article/62453",
        },
        LvlNode {
          "anchor": "BEFE新手指南-VisualizedIntroduction-p.s.友情链接：新人必读by陈承星",
          "children": Array [
            TextNode {
              "domNode": <p>
                 
              </p>,
              "type": "text",
              "value": " ",
            },
          ],
          "domNode": <h2
            class="li1"
            id="BEFE新手指南-VisualizedIntroduction-p.s.友情链接：新人必读by陈承星"
          >
            <strong>
              p.s. 友情链接：
              <a
                href="/pages/viewpage.action?pageId=35977597"
              >
                新人必读
              </a>
               by 陈承星
            </strong>
          </h2>,
          "level": 2,
          "type": "lvl",
          "value": "p.s. 友情链接：新人必读 by 陈承星",
        },
      ],
      "domNode": <h1
        class="p1"
        id="BEFE新手指南-VisualizedIntroduction-BaiduBEFE入职必备："
      >
        <span
          class="s1"
        >
          <strong>
            Baidu BEFE入职必备：
          </strong>
        </span>
      </h1>,
      "level": 1,
      "type": "lvl",
      "value": "Baidu BEFE入职必备：",
    },
  ],
  "global": Map {
    "lvl0" => "新人必读",
    "author" => "     郑亮亮",
  },
  "type": "document",
  "value": null,
}
`;

exports[`parseElementTree spec without global 1`] = `
DocumentNode {
  "children": Array [
    LvlNode {
      "anchor": "user-content-installation",
      "children": Array [
        TextNode {
          "domNode": <p>
            It's recommended to install via 
            <a
              href="https://github.com/isaacs/npm/"
              rel="nofollow"
            >
              npm
            </a>
            :
          </p>,
          "type": "text",
          "value": "It's recommended to install via npm:",
        },
        TextNode {
          "domNode": <pre
            class="editor editor-colors"
          >
            <div
              class="line"
            >
              <span
                class="source shell"
              >
                <span>
                  $ npm install -g robots
                </span>
              </span>
            </div>
          </pre>,
          "type": "text",
          "value": "$ npm install -g robots",
        },
      ],
      "domNode": <h2>
        <a
          aria-hidden="true"
          class="deep-link"
          href="#installation"
          id="user-content-installation"
          rel="nofollow"
        >
          <svg
            aria-hidden="true"
            class="deep-link-icon"
            height="16"
            version="1.1"
            viewBox="0 0 16 16"
            width="16"
          >
            <path
              d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
            />
          </svg>
        </a>
        Installation
      </h2>,
      "level": 2,
      "type": "lvl",
      "value": "Installation",
    },
    LvlNode {
      "anchor": "user-content-usage",
      "children": Array [
        TextNode {
          "domNode": <p>
            Here's an example of using robots.js:
          </p>,
          "type": "text",
          "value": "Here's an example of using robots.js:",
        },
        TextNode {
          "domNode": <pre
            class="editor editor-colors"
          >
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="storage type js"
                >
                  <span>
                    var
                  </span>
                </span>
                <span>
                   robots 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta function-call js"
                >
                  <span
                    class="support function js"
                  >
                    <span>
                      require
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span>
                        robots
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                    
                </span>
                <span
                  class="meta delimiter object comma js"
                >
                  <span>
                    ,
                  </span>
                </span>
                <span>
                   parser 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta class instance constructor js"
                >
                  <span
                    class="keyword operator js"
                  >
                    <span>
                      new
                    </span>
                  </span>
                  <span>
                     
                  </span>
                  <span
                    class="entity name type instance js"
                  >
                    <span>
                      robots
                    </span>
                    <span
                      class="meta delimiter period js"
                    >
                      <span>
                        .
                      </span>
                    </span>
                    <span>
                      RobotsParser
                    </span>
                  </span>
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    (
                  </span>
                  <span>
                    )
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                   
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="variable other object js"
                >
                  <span>
                    parser
                  </span>
                </span>
                <span
                  class="meta js"
                >
                  <span
                    class="meta delimiter method period js"
                  >
                    <span>
                      .
                    </span>
                  </span>
                  <span
                    class="entity name function js"
                  >
                    <span>
                      setUrl
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span
                        class="markup underline link hyperlink"
                      >
                        <span>
                          http://nodeguide.ru/robots.txt
                        </span>
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="meta delimiter object comma js"
                    >
                      <span>
                        ,
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta function js"
                    >
                      <span
                        class="storage type function js"
                      >
                        <span>
                          function
                        </span>
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            parser
                          </span>
                        </span>
                        <span
                          class="meta delimiter object comma js"
                        >
                          <span>
                            ,
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            success
                          </span>
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="punctuation definition function begin curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                        
                    </span>
                    <span
                      class="keyword control js"
                    >
                      <span>
                        if
                      </span>
                    </span>
                    <span
                      class="meta brace round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span>
                      success
                    </span>
                    <span
                      class="meta brace round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta brace curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                          
                    </span>
                    <span
                      class="variable other object js"
                    >
                      <span>
                        parser
                      </span>
                    </span>
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta delimiter method period js"
                      >
                        <span>
                          .
                        </span>
                      </span>
                      <span
                        class="entity name function js"
                      >
                        <span>
                          canFetch
                        </span>
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="string quoted single js"
                        >
                          <span
                            class="punctuation definition string begin js"
                          >
                            <span>
                              '
                            </span>
                          </span>
                          <span>
                            *
                          </span>
                          <span
                            class="punctuation definition string end js"
                          >
                            <span>
                              '
                            </span>
                          </span>
                        </span>
                        <span
                          class="meta delimiter object comma js"
                        >
                          <span>
                            ,
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="string quoted single js"
                        >
                          <span
                            class="punctuation definition string begin js"
                          >
                            <span>
                              '
                            </span>
                          </span>
                          <span>
                            /doc/dailyjs-nodepad/
                          </span>
                          <span
                            class="punctuation definition string end js"
                          >
                            <span>
                              '
                            </span>
                          </span>
                        </span>
                        <span
                          class="meta delimiter object comma js"
                        >
                          <span>
                            ,
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="meta function js"
                        >
                          <span
                            class="storage type function js"
                          >
                            <span>
                              function
                            </span>
                          </span>
                          <span>
                             
                          </span>
                          <span
                            class="meta js"
                          >
                            <span
                              class="punctuation definition begin round js"
                            >
                              <span>
                                (
                              </span>
                            </span>
                            <span
                              class="variable function js"
                            >
                              <span>
                                access
                              </span>
                            </span>
                            <span
                              class="punctuation definition end round js"
                            >
                              <span>
                                )
                              </span>
                            </span>
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="punctuation definition function begin curly js"
                        >
                          <span>
                            {
                          </span>
                        </span>
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta js"
                      >
                        <span>
                                
                        </span>
                        <span
                          class="keyword control js"
                        >
                          <span>
                            if
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="meta brace round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span>
                          access
                        </span>
                        <span
                          class="meta brace round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="meta brace curly js"
                        >
                          <span>
                            {
                          </span>
                        </span>
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta js"
                      >
                        <span>
                                  
                        </span>
                        <span
                          class="comment line double-slash js"
                        >
                          <span
                            class="punctuation definition comment js"
                          >
                            <span>
                              //
                            </span>
                          </span>
                          <span>
                             parse url
                          </span>
                        </span>
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta js"
                      >
                        <span>
                                
                        </span>
                        <span
                          class="meta brace curly js"
                        >
                          <span>
                            }
                          </span>
                        </span>
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta js"
                      >
                        <span>
                              
                        </span>
                        <span
                          class="punctuation definition function end curly js"
                        >
                          <span>
                            }
                          </span>
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation terminator statement js"
                    >
                      <span>
                        ;
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                        
                    </span>
                    <span
                      class="meta brace curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition function end curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
          </pre>,
          "type": "text",
          "value": "var robots = require('robots')  , parser = new robots.RobotsParser(); parser.setUrl('http://nodeguide.ru/robots.txt', function(parser, success) {  if(success) {    parser.canFetch('*', '/doc/dailyjs-nodepad/', function (access) {      if (access) {        // parse url      }    });  }});",
        },
        TextNode {
          "domNode": <p>
            Default crawler user-agent is:
          </p>,
          "type": "text",
          "value": "Default crawler user-agent is:",
        },
        TextNode {
          "domNode": <pre>
            <code>
              Mozilla/5.0 (X11; Linux i686; rv:5.0) Gecko/20100101 Firefox/5.0

            </code>
          </pre>,
          "type": "text",
          "value": "Mozilla/5.0 (X11; Linux i686; rv:5.0) Gecko/20100101 Firefox/5.0
",
        },
        TextNode {
          "domNode": <p>
            Here's an example of using another user-agent and more detailed callback:
          </p>,
          "type": "text",
          "value": "Here's an example of using another user-agent and more detailed callback:",
        },
        TextNode {
          "domNode": <pre
            class="editor editor-colors"
          >
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="storage type js"
                >
                  <span>
                    var
                  </span>
                </span>
                <span>
                   robots 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta function-call js"
                >
                  <span
                    class="support function js"
                  >
                    <span>
                      require
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span>
                        robots
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                    
                </span>
                <span
                  class="meta delimiter object comma js"
                >
                  <span>
                    ,
                  </span>
                </span>
                <span>
                   parser 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta class instance constructor js"
                >
                  <span
                    class="keyword operator js"
                  >
                    <span>
                      new
                    </span>
                  </span>
                  <span>
                     
                  </span>
                  <span
                    class="entity name type instance js"
                  >
                    <span>
                      robots
                    </span>
                    <span
                      class="meta delimiter period js"
                    >
                      <span>
                        .
                      </span>
                    </span>
                    <span>
                      RobotsParser
                    </span>
                  </span>
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    (
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                                  
                </span>
                <span
                  class="string quoted single js"
                >
                  <span
                    class="punctuation definition string begin js"
                  >
                    <span>
                      '
                    </span>
                  </span>
                  <span
                    class="markup underline link hyperlink"
                  >
                    <span>
                      http://nodeguide.ru/robots.txt
                    </span>
                  </span>
                  <span
                    class="punctuation definition string end js"
                  >
                    <span>
                      '
                    </span>
                  </span>
                </span>
                <span
                  class="meta delimiter object comma js"
                >
                  <span>
                    ,
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                                  
                </span>
                <span
                  class="string quoted single js"
                >
                  <span
                    class="punctuation definition string begin js"
                  >
                    <span>
                      '
                    </span>
                  </span>
                  <span>
                    Mozilla/5.0 (compatible; RobotTxtBot/1.0)
                  </span>
                  <span
                    class="punctuation definition string end js"
                  >
                    <span>
                      '
                    </span>
                  </span>
                </span>
                <span
                  class="meta delimiter object comma js"
                >
                  <span>
                    ,
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                                  after_parse
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                              
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    )
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                              
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta function js"
                >
                  <span
                    class="storage type function js"
                  >
                    <span>
                      function
                    </span>
                  </span>
                  <span>
                     
                  </span>
                  <span
                    class="entity name function js"
                  >
                    <span>
                      after_parse
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="variable function js"
                    >
                      <span>
                        parser
                      </span>
                    </span>
                    <span
                      class="meta delimiter object comma js"
                    >
                      <span>
                        ,
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="variable function js"
                    >
                      <span>
                        success
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="punctuation definition function begin curly js"
                >
                  <span>
                    {
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                    
                </span>
                <span
                  class="keyword control js"
                >
                  <span>
                    if
                  </span>
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    (
                  </span>
                </span>
                <span>
                  success
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    )
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta brace curly js"
                >
                  <span>
                    {
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="variable other object js"
                >
                  <span>
                    parser
                  </span>
                </span>
                <span
                  class="meta js"
                >
                  <span
                    class="meta delimiter method period js"
                  >
                    <span>
                      .
                    </span>
                  </span>
                  <span
                    class="entity name function js"
                  >
                    <span>
                      canFetch
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span>
                        *
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="meta delimiter object comma js"
                    >
                      <span>
                        ,
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span>
                        /doc/dailyjs-nodepad/
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="meta delimiter object comma js"
                    >
                      <span>
                        ,
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta function js"
                    >
                      <span
                        class="storage type function js"
                      >
                        <span>
                          function
                        </span>
                      </span>
                      <span>
                         
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            access
                          </span>
                        </span>
                        <span
                          class="meta delimiter object comma js"
                        >
                          <span>
                            ,
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            url
                          </span>
                        </span>
                        <span
                          class="meta delimiter object comma js"
                        >
                          <span>
                            ,
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            reason
                          </span>
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="punctuation definition function begin curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                            
                    </span>
                    <span
                      class="keyword control js"
                    >
                      <span>
                        if
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta brace round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span>
                      access
                    </span>
                    <span
                      class="meta brace round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta brace curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                              
                    </span>
                    <span
                      class="entity name type object console js"
                    >
                      <span>
                        console
                      </span>
                    </span>
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta delimiter method period js"
                      >
                        <span>
                          .
                        </span>
                      </span>
                      <span
                        class="support function console js"
                      >
                        <span>
                          log
                        </span>
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="string quoted single js"
                        >
                          <span
                            class="punctuation definition string begin js"
                          >
                            <span>
                              '
                            </span>
                          </span>
                          <span>
                             url: 
                          </span>
                          <span
                            class="punctuation definition string end js"
                          >
                            <span>
                              '
                            </span>
                          </span>
                        </span>
                        <span
                          class="keyword operator js"
                        >
                          <span>
                            +
                          </span>
                        </span>
                        <span>
                          url
                        </span>
                        <span
                          class="keyword operator js"
                        >
                          <span>
                            +
                          </span>
                        </span>
                        <span
                          class="string quoted single js"
                        >
                          <span
                            class="punctuation definition string begin js"
                          >
                            <span>
                              '
                            </span>
                          </span>
                          <span>
                            , access: 
                          </span>
                          <span
                            class="punctuation definition string end js"
                          >
                            <span>
                              '
                            </span>
                          </span>
                        </span>
                        <span
                          class="keyword operator js"
                        >
                          <span>
                            +
                          </span>
                        </span>
                        <span>
                          access
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation terminator statement js"
                    >
                      <span>
                        ;
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                              
                    </span>
                    <span
                      class="comment line double-slash js"
                    >
                      <span
                        class="punctuation definition comment js"
                      >
                        <span>
                          //
                        </span>
                      </span>
                      <span>
                         parse url ...
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                            
                    </span>
                    <span
                      class="meta brace curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                          
                    </span>
                    <span
                      class="punctuation definition function end curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                    
                </span>
                <span
                  class="meta brace curly js"
                >
                  <span>
                    }
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="punctuation definition function end curly js"
                >
                  <span>
                    }
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
          </pre>,
          "type": "text",
          "value": "var robots = require('robots')  , parser = new robots.RobotsParser(                'http://nodeguide.ru/robots.txt',                'Mozilla/5.0 (compatible; RobotTxtBot/1.0)',                after_parse            );            function after_parse(parser, success) {  if(success) {    parser.canFetch('*', '/doc/dailyjs-nodepad/', function (access, url, reason) {      if (access) {        console.log(' url: '+url+', access: '+access);        // parse url ...      }    });  }};",
        },
        TextNode {
          "domNode": <p>
            Here's an example of getting list of sitemaps:
          </p>,
          "type": "text",
          "value": "Here's an example of getting list of sitemaps:",
        },
        TextNode {
          "domNode": <pre
            class="editor editor-colors"
          >
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="storage type js"
                >
                  <span>
                    var
                  </span>
                </span>
                <span>
                   robots 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta function-call js"
                >
                  <span
                    class="support function js"
                  >
                    <span>
                      require
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span>
                        robots
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                    
                </span>
                <span
                  class="meta delimiter object comma js"
                >
                  <span>
                    ,
                  </span>
                </span>
                <span>
                   parser 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta class instance constructor js"
                >
                  <span
                    class="keyword operator js"
                  >
                    <span>
                      new
                    </span>
                  </span>
                  <span>
                     
                  </span>
                  <span
                    class="entity name type instance js"
                  >
                    <span>
                      robots
                    </span>
                    <span
                      class="meta delimiter period js"
                    >
                      <span>
                        .
                      </span>
                    </span>
                    <span>
                      RobotsParser
                    </span>
                  </span>
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    (
                  </span>
                  <span>
                    )
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                   
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="variable other object js"
                >
                  <span>
                    parser
                  </span>
                </span>
                <span
                  class="meta js"
                >
                  <span
                    class="meta delimiter method period js"
                  >
                    <span>
                      .
                    </span>
                  </span>
                  <span
                    class="entity name function js"
                  >
                    <span>
                      setUrl
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span
                        class="markup underline link hyperlink"
                      >
                        <span>
                          http://nodeguide.ru/robots.txt
                        </span>
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="meta delimiter object comma js"
                    >
                      <span>
                        ,
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta function js"
                    >
                      <span
                        class="storage type function js"
                      >
                        <span>
                          function
                        </span>
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            parser
                          </span>
                        </span>
                        <span
                          class="meta delimiter object comma js"
                        >
                          <span>
                            ,
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            success
                          </span>
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="punctuation definition function begin curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                        
                    </span>
                    <span
                      class="keyword control js"
                    >
                      <span>
                        if
                      </span>
                    </span>
                    <span
                      class="meta brace round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span>
                      success
                    </span>
                    <span
                      class="meta brace round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta brace curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                          
                    </span>
                    <span
                      class="variable other object js"
                    >
                      <span>
                        parser
                      </span>
                    </span>
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta delimiter method period js"
                      >
                        <span>
                          .
                        </span>
                      </span>
                      <span
                        class="entity name function js"
                      >
                        <span>
                          getSitemaps
                        </span>
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="meta function js"
                        >
                          <span
                            class="storage type function js"
                          >
                            <span>
                              function
                            </span>
                          </span>
                          <span
                            class="meta js"
                          >
                            <span
                              class="punctuation definition begin round js"
                            >
                              <span>
                                (
                              </span>
                            </span>
                            <span
                              class="variable function js"
                            >
                              <span>
                                sitemaps
                              </span>
                            </span>
                            <span
                              class="punctuation definition end round js"
                            >
                              <span>
                                )
                              </span>
                            </span>
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="punctuation definition function begin curly js"
                        >
                          <span>
                            {
                          </span>
                        </span>
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta js"
                      >
                        <span>
                                
                        </span>
                        <span
                          class="comment line double-slash js"
                        >
                          <span
                            class="punctuation definition comment js"
                          >
                            <span>
                              //
                            </span>
                          </span>
                          <span>
                             sitemaps — array
                          </span>
                        </span>
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta js"
                      >
                        <span>
                              
                        </span>
                        <span
                          class="punctuation definition function end curly js"
                        >
                          <span>
                            }
                          </span>
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation terminator statement js"
                    >
                      <span>
                        ;
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                        
                    </span>
                    <span
                      class="meta brace curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition function end curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
          </pre>,
          "type": "text",
          "value": "var robots = require('robots')  , parser = new robots.RobotsParser(); parser.setUrl('http://nodeguide.ru/robots.txt', function(parser, success) {  if(success) {    parser.getSitemaps(function(sitemaps) {      // sitemaps — array    });  }});",
        },
        TextNode {
          "domNode": <p>
            Here's an example of getCrawlDelay usage:
          </p>,
          "type": "text",
          "value": "Here's an example of getCrawlDelay usage:",
        },
        TextNode {
          "domNode": <pre
            class="editor editor-colors"
          >
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="storage type js"
                >
                  <span>
                    var
                  </span>
                </span>
                <span>
                   robots 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta function-call js"
                >
                  <span
                    class="support function js"
                  >
                    <span>
                      require
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span>
                        robots
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                        
                </span>
                <span
                  class="meta delimiter object comma js"
                >
                  <span>
                    ,
                  </span>
                </span>
                <span>
                   parser 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta class instance constructor js"
                >
                  <span
                    class="keyword operator js"
                  >
                    <span>
                      new
                    </span>
                  </span>
                  <span>
                     
                  </span>
                  <span
                    class="entity name type instance js"
                  >
                    <span>
                      robots
                    </span>
                    <span
                      class="meta delimiter period js"
                    >
                      <span>
                        .
                      </span>
                    </span>
                    <span>
                      RobotsParser
                    </span>
                  </span>
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    (
                  </span>
                  <span>
                    )
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                   
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                  <span>
                     for example:
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                  <span>
                     $ curl -s 
                  </span>
                  <span
                    class="markup underline link hyperlink"
                  >
                    <span>
                      http://nodeguide.ru/robots.txt
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                  <span>
                     User-agent: Google-bot
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                  <span>
                     Disallow: / 
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                  <span>
                     Crawl-delay: 2
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                  <span>
                     User-agent: *
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                  <span>
                     Disallow: /
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="comment line double-slash js"
                >
                  <span
                    class="punctuation definition comment js"
                  >
                    <span>
                      //
                    </span>
                  </span>
                  <span>
                     Crawl-delay: 2
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                   
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      
                </span>
                <span
                  class="variable other object js"
                >
                  <span>
                    parser
                  </span>
                </span>
                <span
                  class="meta js"
                >
                  <span
                    class="meta delimiter method period js"
                  >
                    <span>
                      .
                    </span>
                  </span>
                  <span
                    class="entity name function js"
                  >
                    <span>
                      setUrl
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span
                        class="markup underline link hyperlink"
                      >
                        <span>
                          http://nodeguide.ru/robots.txt
                        </span>
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="meta delimiter object comma js"
                    >
                      <span>
                        ,
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta function js"
                    >
                      <span
                        class="storage type function js"
                      >
                        <span>
                          function
                        </span>
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            parser
                          </span>
                        </span>
                        <span
                          class="meta delimiter object comma js"
                        >
                          <span>
                            ,
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            success
                          </span>
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="punctuation definition function begin curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                            
                    </span>
                    <span
                      class="keyword control js"
                    >
                      <span>
                        if
                      </span>
                    </span>
                    <span
                      class="meta brace round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span>
                      success
                    </span>
                    <span
                      class="meta brace round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta brace curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                              
                    </span>
                    <span
                      class="storage type js"
                    >
                      <span>
                        var
                      </span>
                    </span>
                    <span>
                       GoogleBotDelay 
                    </span>
                    <span
                      class="keyword operator assignment js"
                    >
                      <span>
                        =
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="variable other object js"
                    >
                      <span>
                        parser
                      </span>
                    </span>
                    <span
                      class="meta js"
                    >
                      <span
                        class="meta delimiter method period js"
                      >
                        <span>
                          .
                        </span>
                      </span>
                      <span
                        class="entity name function js"
                      >
                        <span>
                          getCrawlDelay
                        </span>
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="string quoted double js"
                        >
                          <span
                            class="punctuation definition string begin js"
                          >
                            <span>
                              "
                            </span>
                          </span>
                          <span>
                            Google-bot
                          </span>
                          <span
                            class="punctuation definition string end js"
                          >
                            <span>
                              "
                            </span>
                          </span>
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation terminator statement js"
                    >
                      <span>
                        ;
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                              
                    </span>
                    <span
                      class="comment line double-slash js"
                    >
                      <span
                        class="punctuation definition comment js"
                      >
                        <span>
                          //
                        </span>
                      </span>
                      <span>
                         ...
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                            
                    </span>
                    <span
                      class="meta brace curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                          
                    </span>
                    <span
                      class="punctuation definition function end curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
          </pre>,
          "type": "text",
          "value": "    var robots = require('robots')      , parser = new robots.RobotsParser();     // for example:    //    // $ curl -s http://nodeguide.ru/robots.txt    //    // User-agent: Google-bot    // Disallow: /     // Crawl-delay: 2    //    // User-agent: *    // Disallow: /    // Crawl-delay: 2     parser.setUrl('http://nodeguide.ru/robots.txt', function(parser, success) {      if(success) {        var GoogleBotDelay = parser.getCrawlDelay(\\"Google-bot\\");        // ...      }    });",
        },
        TextNode {
          "domNode": <p>
            An example of passing options to the HTTP request:
          </p>,
          "type": "text",
          "value": "An example of passing options to the HTTP request:",
        },
        TextNode {
          "domNode": <pre
            class="editor editor-colors"
          >
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="storage type js"
                >
                  <span>
                    var
                  </span>
                </span>
                <span>
                   options 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta brace curly js"
                >
                  <span>
                    {
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                    headers
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    :
                  </span>
                </span>
                <span
                  class="meta brace curly js"
                >
                  <span>
                    {
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                      Authorization
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    :
                  </span>
                </span>
                <span
                  class="string quoted double js"
                >
                  <span
                    class="punctuation definition string begin js"
                  >
                    <span>
                      "
                    </span>
                  </span>
                  <span>
                    Basic 
                  </span>
                  <span
                    class="punctuation definition string end js"
                  >
                    <span>
                      "
                    </span>
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="keyword operator js"
                >
                  <span>
                    +
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta class instance constructor js"
                >
                  <span
                    class="keyword operator js"
                  >
                    <span>
                      new
                    </span>
                  </span>
                  <span>
                     
                  </span>
                  <span
                    class="entity name type instance js"
                  >
                    <span>
                      Buffer
                    </span>
                  </span>
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    (
                  </span>
                </span>
                <span
                  class="string quoted double js"
                >
                  <span
                    class="punctuation definition string begin js"
                  >
                    <span>
                      "
                    </span>
                  </span>
                  <span>
                    username:password
                  </span>
                  <span
                    class="punctuation definition string end js"
                  >
                    <span>
                      "
                    </span>
                  </span>
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    )
                  </span>
                </span>
                <span
                  class="meta js"
                >
                  <span
                    class="meta delimiter method period js"
                  >
                    <span>
                      .
                    </span>
                  </span>
                  <span
                    class="support function js"
                  >
                    <span>
                      toString
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted double js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          "
                        </span>
                      </span>
                      <span>
                        base64
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          "
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
                <span
                  class="meta brace curly js"
                >
                  <span>
                    }
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta brace curly js"
                >
                  <span>
                    }
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                   
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="storage type js"
                >
                  <span>
                    var
                  </span>
                </span>
                <span>
                   robots 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta function-call js"
                >
                  <span
                    class="support function js"
                  >
                    <span>
                      require
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span>
                        robots
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                    
                </span>
                <span
                  class="meta delimiter object comma js"
                >
                  <span>
                    ,
                  </span>
                </span>
                <span>
                   parser 
                </span>
                <span
                  class="keyword operator assignment js"
                >
                  <span>
                    =
                  </span>
                </span>
                <span>
                   
                </span>
                <span
                  class="meta class instance constructor js"
                >
                  <span
                    class="keyword operator js"
                  >
                    <span>
                      new
                    </span>
                  </span>
                  <span>
                     
                  </span>
                  <span
                    class="entity name type instance js"
                  >
                    <span>
                      robots
                    </span>
                    <span
                      class="meta delimiter period js"
                    >
                      <span>
                        .
                      </span>
                    </span>
                    <span>
                      RobotsParser
                    </span>
                  </span>
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    (
                  </span>
                </span>
                <span
                  class="constant language null js"
                >
                  <span>
                    null
                  </span>
                </span>
                <span
                  class="meta delimiter object comma js"
                >
                  <span>
                    ,
                  </span>
                </span>
                <span>
                   options
                </span>
                <span
                  class="meta brace round js"
                >
                  <span>
                    )
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span>
                   
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="variable other object js"
                >
                  <span>
                    parser
                  </span>
                </span>
                <span
                  class="meta js"
                >
                  <span
                    class="meta delimiter method period js"
                  >
                    <span>
                      .
                    </span>
                  </span>
                  <span
                    class="entity name function js"
                  >
                    <span>
                      setUrl
                    </span>
                  </span>
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition begin round js"
                    >
                      <span>
                        (
                      </span>
                    </span>
                    <span
                      class="string quoted single js"
                    >
                      <span
                        class="punctuation definition string begin js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                      <span
                        class="markup underline link hyperlink"
                      >
                        <span>
                          http://nodeguide.ru/robots.txt
                        </span>
                      </span>
                      <span
                        class="punctuation definition string end js"
                      >
                        <span>
                          '
                        </span>
                      </span>
                    </span>
                    <span
                      class="meta delimiter object comma js"
                    >
                      <span>
                        ,
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="meta function js"
                    >
                      <span
                        class="storage type function js"
                      >
                        <span>
                          function
                        </span>
                      </span>
                      <span
                        class="meta js"
                      >
                        <span
                          class="punctuation definition begin round js"
                        >
                          <span>
                            (
                          </span>
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            parser
                          </span>
                        </span>
                        <span
                          class="meta delimiter object comma js"
                        >
                          <span>
                            ,
                          </span>
                        </span>
                        <span>
                           
                        </span>
                        <span
                          class="variable function js"
                        >
                          <span>
                            success
                          </span>
                        </span>
                        <span
                          class="punctuation definition end round js"
                        >
                          <span>
                            )
                          </span>
                        </span>
                      </span>
                    </span>
                    <span>
                       
                    </span>
                    <span
                      class="punctuation definition function begin curly js"
                    >
                      <span>
                        {
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span>
                        
                    </span>
                    <span
                      class="keyword operator js"
                    >
                      <span>
                        ...
                      </span>
                    </span>
                  </span>
                </span>
              </span>
            </div>
            <div
              class="line"
            >
              <span
                class="source js"
              >
                <span
                  class="meta js"
                >
                  <span
                    class="meta js"
                  >
                    <span
                      class="punctuation definition function end curly js"
                    >
                      <span>
                        }
                      </span>
                    </span>
                    <span
                      class="punctuation definition end round js"
                    >
                      <span>
                        )
                      </span>
                    </span>
                  </span>
                </span>
                <span
                  class="punctuation terminator statement js"
                >
                  <span>
                    ;
                  </span>
                </span>
              </span>
            </div>
          </pre>,
          "type": "text",
          "value": "var options = {  headers:{    Authorization:\\"Basic \\" + new Buffer(\\"username:password\\").toString(\\"base64\\")}} var robots = require('robots')  , parser = new robots.RobotsParser(null, options); parser.setUrl('http://nodeguide.ru/robots.txt', function(parser, success) {  ...});",
        },
      ],
      "domNode": <h2>
        <a
          aria-hidden="true"
          class="deep-link"
          href="#usage"
          id="user-content-usage"
          rel="nofollow"
        >
          <svg
            aria-hidden="true"
            class="deep-link-icon"
            height="16"
            version="1.1"
            viewBox="0 0 16 16"
            width="16"
          >
            <path
              d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
            />
          </svg>
        </a>
        Usage
      </h2>,
      "level": 2,
      "type": "lvl",
      "value": "Usage",
    },
    LvlNode {
      "anchor": "user-content-api",
      "children": Array [
        TextNode {
          "domNode": <p>
            RobotsParser — main class. This class provides a set of methods to read,
    parse and answer questions about a single robots.txt file.
          </p>,
          "type": "text",
          "value": "RobotsParser — main class. This class provides a set of methods to read,
    parse and answer questions about a single robots.txt file.",
        },
        TextNode {
          "domNode": <li>
            <strong>
              setUrl(url, read)
            </strong>
             — sets the URL referring to a robots.txt file.
      by default, invokes read() method.
      If read is a function, it is called once the remote file is downloaded and parsed, and it
      takes in two arguments: the first is the parser itself, and the second is a boolean
      which is True if the the remote file was successfully parsed.
          </li>,
          "type": "text",
          "value": "setUrl(url, read) — sets the URL referring to a robots.txt file.
      by default, invokes read() method.
      If read is a function, it is called once the remote file is downloaded and parsed, and it
      takes in two arguments: the first is the parser itself, and the second is a boolean
      which is True if the the remote file was successfully parsed.",
        },
        TextNode {
          "domNode": <li>
            <strong>
              read(after_parse)
            </strong>
             — reads the robots.txt URL and feeds it to the parser
          </li>,
          "type": "text",
          "value": "read(after_parse) — reads the robots.txt URL and feeds it to the parser",
        },
        TextNode {
          "domNode": <li>
            <strong>
              parse(lines)
            </strong>
             — parse the input lines from a robots.txt file
          </li>,
          "type": "text",
          "value": "parse(lines) — parse the input lines from a robots.txt file",
        },
        TextNode {
          "domNode": <li>
            <strong>
              canFetch(userAgent, url, callback)
            </strong>
             — using the parsed robots.txt decide if
      userAgent can fetch url. Callback function:
      
            <code>
              function callback(access, url, reason) { ... }
            </code>
            
      where:
      
            <ul>
              
        
              <li>
                <em>
                  access
                </em>
                 — can this url be fetched. true/false.
              </li>
              
        
              <li>
                <em>
                  url
                </em>
                 — target url
              </li>
              
        
              <li>
                <em>
                  reason
                </em>
                 — reason for 
                <code>
                  access
                </code>
                . Object:
          
                <ul>
                  
            
                  <li>
                    type — valid values: 'statusCode', 'entry', 'defaultEntry', 'noRule'
                  </li>
                  
            
                  <li>
                    entry — an instance of 
                    <code>
                      lib/Entry.js:
                    </code>
                    . Only for types: 'entry', 'defaultEntry'
                  </li>
                  
            
                  <li>
                    statusCode — http response status code for url. Only for type 'statusCode'
                  </li>
                  
          
                </ul>
                
        
              </li>
              
      
            </ul>
            
    
          </li>,
          "type": "text",
          "value": "canFetch(userAgent, url, callback) — using the parsed robots.txt decide if
      userAgent can fetch url. Callback function:
      function callback(access, url, reason) { ... }
      where:
      
        access — can this url be fetched. true/false.
        url — target url
        reason — reason for access. Object:
          
            type — valid values: 'statusCode', 'entry', 'defaultEntry', 'noRule'
            entry — an instance of lib/Entry.js:. Only for types: 'entry', 'defaultEntry'
            statusCode — http response status code for url. Only for type 'statusCode'
          
        
      
    ",
        },
        TextNode {
          "domNode": <li>
            <strong>
              canFetchSync(userAgent, url)
            </strong>
             — using the parsed robots.txt decide if
      userAgent can fetch url. Return true/false.
          </li>,
          "type": "text",
          "value": "canFetchSync(userAgent, url) — using the parsed robots.txt decide if
      userAgent can fetch url. Return true/false.",
        },
        TextNode {
          "domNode": <li>
            <strong>
              getCrawlDelay(userAgent)
            </strong>
             — returns Crawl-delay for the certain userAgent
          </li>,
          "type": "text",
          "value": "getCrawlDelay(userAgent) — returns Crawl-delay for the certain userAgent",
        },
        TextNode {
          "domNode": <li>
            <strong>
              getSitemaps(sitemaps)
            </strong>
             — gets Sitemaps from parsed robots.txt
          </li>,
          "type": "text",
          "value": "getSitemaps(sitemaps) — gets Sitemaps from parsed robots.txt",
        },
        TextNode {
          "domNode": <li>
            <strong>
              getDisallowedPaths(userAgent)
            </strong>
             — gets paths explictly disallowed for the user agent specified AND *
          </li>,
          "type": "text",
          "value": "getDisallowedPaths(userAgent) — gets paths explictly disallowed for the user agent specified AND *",
        },
      ],
      "domNode": <h2>
        <a
          aria-hidden="true"
          class="deep-link"
          href="#api"
          id="user-content-api"
          rel="nofollow"
        >
          <svg
            aria-hidden="true"
            class="deep-link-icon"
            height="16"
            version="1.1"
            viewBox="0 0 16 16"
            width="16"
          >
            <path
              d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
            />
          </svg>
        </a>
        API
      </h2>,
      "level": 2,
      "type": "lvl",
      "value": "API",
    },
    LvlNode {
      "anchor": "user-content-license",
      "children": Array [
        TextNode {
          "domNode": <p>
            See 
            <a
              href="https://github.com/ekalinin/robots.js/blob/master/LICENSE"
              rel="nofollow"
            >
              LICENSE
            </a>
            
    file.
          </p>,
          "type": "text",
          "value": "See LICENSE
    file.",
        },
      ],
      "domNode": <h2>
        <a
          aria-hidden="true"
          class="deep-link"
          href="#license"
          id="user-content-license"
          rel="nofollow"
        >
          <svg
            aria-hidden="true"
            class="deep-link-icon"
            height="16"
            version="1.1"
            viewBox="0 0 16 16"
            width="16"
          >
            <path
              d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
            />
          </svg>
        </a>
        License
      </h2>,
      "level": 2,
      "type": "lvl",
      "value": "License",
    },
    LvlNode {
      "anchor": "user-content-resources",
      "children": Array [
        TextNode {
          "domNode": <li>
            <a
              href="http://code.google.com/web/controlcrawlindex/docs/robots_txt.html"
              rel="nofollow"
            >
              Robots.txt Specifications by Google
            </a>
          </li>,
          "type": "text",
          "value": "Robots.txt Specifications by Google",
        },
        TextNode {
          "domNode": <li>
            <a
              href="http://docs.python.org/library/robotparser.html"
              rel="nofollow"
            >
              Robots.txt parser for python
            </a>
          </li>,
          "type": "text",
          "value": "Robots.txt parser for python",
        },
        TextNode {
          "domNode": <li>
            <a
              href="http://www.robotstxt.org/orig.html"
              rel="nofollow"
            >
              A Standard for Robot Exclusion
            </a>
          </li>,
          "type": "text",
          "value": "A Standard for Robot Exclusion",
        },
      ],
      "domNode": <h1>
        <a
          aria-hidden="true"
          class="deep-link"
          href="#resources"
          id="user-content-resources"
          rel="nofollow"
        >
          <svg
            aria-hidden="true"
            class="deep-link-icon"
            height="16"
            version="1.1"
            viewBox="0 0 16 16"
            width="16"
          >
            <path
              d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"
            />
          </svg>
        </a>
        Resources
      </h1>,
      "level": 1,
      "type": "lvl",
      "value": "Resources",
    },
  ],
  "global": Map {},
  "type": "document",
  "value": null,
}
`;
